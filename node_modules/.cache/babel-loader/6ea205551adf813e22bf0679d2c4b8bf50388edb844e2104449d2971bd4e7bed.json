{"ast":null,"code":"var _jsxFileName = \"/Users/viktoriakapinus/Documents/MyToDolist/todolist/src/Todolist.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport { useAutoAnimate } from \"@formkit/auto-animate/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Todolist = _ref => {\n  _s();\n  let {\n    children,\n    ...props\n  } = _ref;\n  let [title, setTitle] = useState(\"\");\n  const [listRef] = useAutoAnimate();\n  const addTask = () => {\n    props.addTask(title);\n    setTitle(\"\");\n    if (onChangeRef.current) {\n      props.addTask(onChangeRef.current.value);\n      onChangeRef.current.value = \"\";\n    }\n  };\n  const onChangeHandler = e => {\n    setTitle(e.currentTarget.value);\n  };\n  let onChangeRef = useRef(null);\n  const onKeyPressHandler = e => {\n    if (e.key === 'Enter') {\n      addTask();\n    }\n  };\n  const onAllClickHandler = () => props.changeFilter(\"all\");\n  const onActiveClickHandler = () => props.changeFilter(\"active\");\n  const onCompletedClickHandler = () => props.changeFilter(\"completed\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: props.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        // value={title}\n        onChange: onChangeHandler,\n        ref: onChangeRef,\n        onKeyPress: onKeyPressHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addTask,\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      ref: listRef,\n      children: props.tasks.map(t => {\n        const onClickHandler = () => props.removeTask(t.id);\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: t.isDone\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: t.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: onClickHandler,\n            children: \"x\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 25\n          }, this)]\n        }, t.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 28\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onAllClickHandler,\n        children: \"All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onActiveClickHandler,\n        children: \"Active\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onCompletedClickHandler,\n        children: \"Completed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 12\n  }, this);\n};\n\n//----------------------------------------------------------------------------------\n// import React, {ChangeEvent, KeyboardEvent, useRef, useState} from 'react';\n// import {FilterValuesType} from './App';\n// import {useAutoAnimate} from \"@formkit/auto-animate/react\";\n//\n// type TaskType = {\n//     id: string\n//     title: string\n//     isDone: boolean\n// }\n//\n// type PropsType = {\n//     title: string\n//     tasks: Array<TaskType>\n//     removeTask: (taskId: string) => void\n//     changeFilter: (value: FilterValuesType) => void\n//     addTask: (title: string) => void\n//     children?:React.ReactNode\n// }\n//\n// export const Todolist:React.FC<PropsType>=({children, ...props}) =>{\n//     const [listRef] = useAutoAnimate<HTMLUListElement>()\n//     let onChangeRef = useRef<HTMLInputElement>(null)\n//     //let [title, setTitle] = useState(\"\")\n//\n//     const addTask = () => {\n//         // props.addTask(title);\n//         // setTitle(\"\");\n//         if (onChangeRef.current) {\n//             props.addTask(onChangeRef.current.value)\n//             onChangeRef.current.value = ''\n//         }\n//     }\n//\n//     // const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n//     //     setTitle(e.currentTarget.value)\n//     // }\n//\n//\n//     const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n//         if (e.key === 'Enter') {\n//             addTask();\n//         }\n//     }\n//\n//     const onAllClickHandler = () => props.changeFilter(\"all\");\n//     const onActiveClickHandler = () => props.changeFilter(\"active\");\n//     const onCompletedClickHandler = () => props.changeFilter(\"completed\");\n//\n//     return <div>\n//         <h3>{props.title}</h3>\n//         <div>\n//             <input\n//                 //value={title}\n//                 // onChange={ onChangeHandler }\n//                 ref={onChangeRef}\n//                 onKeyPress={onKeyPressHandler}\n//             />\n//             <button onClick={addTask}>+</button>\n//         </div>\n//         <ul ref={listRef}>\n//             {\n//                 props.tasks.map(t => {\n//\n//                     const onClickHandler = () => props.removeTask(t.id)\n//\n//                     return <li key={t.id} >\n//                         <input type=\"checkbox\" checked={t.isDone}/>\n//                         <span>{t.title}</span>\n//                         <button onClick={onClickHandler}>x</button>\n//                     </li>\n//                 })\n//             }\n//         </ul>\n//         <div>\n//             <button onClick={onAllClickHandler}>All</button>\n//             <button onClick={onActiveClickHandler}>Active</button>\n//             <button onClick={onCompletedClickHandler}>Completed</button>\n//         </div>\n//         {children}\n//     </div>\n// }\n_s(Todolist, \"REE/QmC9hkZCKtO5PQTpCCNGYb0=\", false, function () {\n  return [useAutoAnimate];\n});\n_c = Todolist;\nvar _c;\n$RefreshReg$(_c, \"Todolist\");","map":{"version":3,"names":["React","useRef","useState","useAutoAnimate","Todolist","children","props","title","setTitle","listRef","addTask","onChangeRef","current","value","onChangeHandler","e","currentTarget","onKeyPressHandler","key","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasks","map","t","onClickHandler","removeTask","id","isDone"],"sources":["/Users/viktoriakapinus/Documents/MyToDolist/todolist/src/Todolist.tsx"],"sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useRef, useState} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {useAutoAnimate} from \"@formkit/auto-animate/react\";\r\n\r\ntype TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string) => void\r\n    changeFilter: (value: FilterValuesType) => void\r\n    addTask: (title: string) => void\r\n    children?:React.ReactNode\r\n}\r\n\r\n\r\n\r\nexport const Todolist:React.FC<PropsType>=({children,...props}) =>{\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n    const [listRef] = useAutoAnimate<HTMLUListElement>()\r\n\r\n    const addTask = () => {\r\n        props.addTask(title);\r\n        setTitle(\"\")\r\n        if (onChangeRef.current) {\r\n            props.addTask(onChangeRef.current.value)\r\n            onChangeRef.current.value = \"\"\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const onChangeHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n\r\n    }\r\n    let onChangeRef = useRef<HTMLInputElement>(null)\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addTask();\r\n        }\r\n    }\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\");\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\");\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\");\r\n\r\n    return <div>\r\n\r\n        <div>{children}</div>\r\n        <h3>{props.title}</h3>\r\n\r\n        <div>\r\n\r\n\r\n             <input\r\n                // value={title}\r\n                onChange={ onChangeHandler }\r\n                ref={onChangeRef}\r\n                onKeyPress={onKeyPressHandler}\r\n            />\r\n\r\n            <button onClick={addTask}>+</button>\r\n        </div>\r\n        <ul ref={listRef}>\r\n            {\r\n                props.tasks.map(t => {\r\n\r\n                    const onClickHandler = () => props.removeTask(t.id)\r\n\r\n                    return <li key={t.id}>\r\n                        <input type=\"checkbox\" checked={t.isDone}/>\r\n                        <span>{t.title}</span>\r\n                        <button onClick={onClickHandler}>x</button>\r\n                    </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <button onClick={onAllClickHandler}>All</button>\r\n            <button onClick={onActiveClickHandler}>Active</button>\r\n            <button onClick={onCompletedClickHandler}>Completed</button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//----------------------------------------------------------------------------------\r\n// import React, {ChangeEvent, KeyboardEvent, useRef, useState} from 'react';\r\n// import {FilterValuesType} from './App';\r\n// import {useAutoAnimate} from \"@formkit/auto-animate/react\";\r\n//\r\n// type TaskType = {\r\n//     id: string\r\n//     title: string\r\n//     isDone: boolean\r\n// }\r\n//\r\n// type PropsType = {\r\n//     title: string\r\n//     tasks: Array<TaskType>\r\n//     removeTask: (taskId: string) => void\r\n//     changeFilter: (value: FilterValuesType) => void\r\n//     addTask: (title: string) => void\r\n//     children?:React.ReactNode\r\n// }\r\n//\r\n// export const Todolist:React.FC<PropsType>=({children, ...props}) =>{\r\n//     const [listRef] = useAutoAnimate<HTMLUListElement>()\r\n//     let onChangeRef = useRef<HTMLInputElement>(null)\r\n//     //let [title, setTitle] = useState(\"\")\r\n//\r\n//     const addTask = () => {\r\n//         // props.addTask(title);\r\n//         // setTitle(\"\");\r\n//         if (onChangeRef.current) {\r\n//             props.addTask(onChangeRef.current.value)\r\n//             onChangeRef.current.value = ''\r\n//         }\r\n//     }\r\n//\r\n//     // const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n//     //     setTitle(e.currentTarget.value)\r\n//     // }\r\n//\r\n//\r\n//     const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n//         if (e.key === 'Enter') {\r\n//             addTask();\r\n//         }\r\n//     }\r\n//\r\n//     const onAllClickHandler = () => props.changeFilter(\"all\");\r\n//     const onActiveClickHandler = () => props.changeFilter(\"active\");\r\n//     const onCompletedClickHandler = () => props.changeFilter(\"completed\");\r\n//\r\n//     return <div>\r\n//         <h3>{props.title}</h3>\r\n//         <div>\r\n//             <input\r\n//                 //value={title}\r\n//                 // onChange={ onChangeHandler }\r\n//                 ref={onChangeRef}\r\n//                 onKeyPress={onKeyPressHandler}\r\n//             />\r\n//             <button onClick={addTask}>+</button>\r\n//         </div>\r\n//         <ul ref={listRef}>\r\n//             {\r\n//                 props.tasks.map(t => {\r\n//\r\n//                     const onClickHandler = () => props.removeTask(t.id)\r\n//\r\n//                     return <li key={t.id} >\r\n//                         <input type=\"checkbox\" checked={t.isDone}/>\r\n//                         <span>{t.title}</span>\r\n//                         <button onClick={onClickHandler}>x</button>\r\n//                     </li>\r\n//                 })\r\n//             }\r\n//         </ul>\r\n//         <div>\r\n//             <button onClick={onAllClickHandler}>All</button>\r\n//             <button onClick={onActiveClickHandler}>Active</button>\r\n//             <button onClick={onCompletedClickHandler}>Completed</button>\r\n//         </div>\r\n//         {children}\r\n//     </div>\r\n// }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}