{"ast":null,"code":"var _jsxFileName = \"/Users/viktoriakapinus/Documents/MyToDolist/todolist/src/Todolist.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport s from './Todolist.module.css';\nimport { Input } from \"./Components/Input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Todolist(props) {\n  _s();\n  const onClickHandler = nameButton => {\n    props.AddNameButton(props.todoListsID, nameButton);\n  };\n  const RemoveTask = taskId => {\n    props.removeTask(props.todoListsID, taskId);\n  };\n  const AddMessage = valueInput => {\n    props.AddMessage(props.todoListsID, valueInput);\n  };\n  const ChangeStatus = (id, e) => {\n    props.ChangeStatus(props.todoListsID, id, e);\n  };\n  const deleteTodolist = () => {\n    props.deleteTodolist(props.todoListsID);\n  };\n  const [enable, SetEnable] = useState(false);\n  const DoubleClickSpan = () => {\n    SetEnable(!enable);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [props.title, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteTodolist,\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      AddMessage: AddMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: props.tasks.map(el => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: el.isDone ? s.status_active : '',\n          children: [enable ? /*#__PURE__*/_jsxDEV(\"input\", {\n            value: el.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 37\n          }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n            children: el.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 63\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: 'checkbox',\n            onChange: e => ChangeStatus(el.id, e.currentTarget.checked),\n            checked: el.isDone\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 28\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => RemoveTask(el.id),\n            children: \"X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 28\n          }, this)]\n        }, el.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 24\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: props.Filter === 'all' ? s.button_filter : '',\n      onClick: () => onClickHandler('all'),\n      children: \"All\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: props.Filter === 'active' ? s.button_filter : '',\n      onClick: () => onClickHandler('active'),\n      children: \"Active\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: props.Filter === 'completed' ? s.button_filter : '',\n      onClick: () => onClickHandler('completed'),\n      children: \"Completed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 12\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 8\n  }, this);\n}\n\n//----------------------------------------------------------------------------------\n// import React, {ChangeEvent, KeyboardEvent, useRef, useState} from 'react';\n// import {FilterValuesType} from './App';\n// import {useAutoAnimate} from \"@formkit/auto-animate/react\";\n//\n// type TaskType = {\n//     id: string\n//     title: string\n//     isDone: boolean\n// }\n//\n// type PropsType = {\n//     title: string\n//     tasks: Array<TaskType>\n//     removeTask: (taskId: string) => void\n//     changeFilter: (value: FilterValuesType) => void\n//     addTask: (title: string) => void\n//     children?:React.ReactNode\n// }\n//\n// export const Todolist:React.FC<PropsType>=({children, ...props}) =>{\n//     const [listRef] = useAutoAnimate<HTMLUListElement>()\n//     let onChangeRef = useRef<HTMLInputElement>(null)\n//     //let [title, setTitle] = useState(\"\")\n//\n//     const addTask = () => {\n//         // props.addTask(title);\n//         // setTitle(\"\");\n//         if (onChangeRef.current) {\n//             props.addTask(onChangeRef.current.value)\n//             onChangeRef.current.value = ''\n//         }\n//     }\n//\n//     // const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n//     //     setTitle(e.currentTarget.value)\n//     // }\n//\n//\n//     const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n//         if (e.key === 'Enter') {\n//             addTask();\n//         }\n//     }\n//\n//     const onAllClickHandler = () => props.changeFilter(\"all\");\n//     const onActiveClickHandler = () => props.changeFilter(\"active\");\n//     const onCompletedClickHandler = () => props.changeFilter(\"completed\");\n//\n//     return <div>\n//         <h3>{props.title}</h3>\n//         <div>\n//             <input\n//                 //value={title}\n//                 // onChange={ onChangeHandler }\n//                 ref={onChangeRef}\n//                 onKeyPress={onKeyPressHandler}\n//             />\n//             <button onClick={addTask}>+</button>\n//         </div>\n//         <ul ref={listRef}>\n//             {\n//                 props.tasks.map(t => {\n//\n//                     const onClickHandler = () => props.removeTask(t.id)\n//\n//                     return <li key={t.id} >\n//                         <input type=\"checkbox\" checked={t.isDone}/>\n//                         <span>{t.title}</span>\n//                         <button onClick={onClickHandler}>x</button>\n//                     </li>\n//                 })\n//             }\n//         </ul>\n//         <div>\n//             <button onClick={onAllClickHandler}>All</button>\n//             <button onClick={onActiveClickHandler}>Active</button>\n//             <button onClick={onCompletedClickHandler}>Completed</button>\n//         </div>\n//         {children}\n//     </div>\n// }\n_s(Todolist, \"yjsFXqYYU4wSpGiMsjxTknGCizE=\");\n_c = Todolist;\nvar _c;\n$RefreshReg$(_c, \"Todolist\");","map":{"version":3,"names":["React","useState","s","Input","Todolist","props","onClickHandler","nameButton","AddNameButton","todoListsID","RemoveTask","taskId","removeTask","AddMessage","valueInput","ChangeStatus","id","e","deleteTodolist","enable","SetEnable","DoubleClickSpan","title","tasks","map","el","isDone","status_active","currentTarget","checked","Filter","button_filter"],"sources":["/Users/viktoriakapinus/Documents/MyToDolist/todolist/src/Todolist.tsx"],"sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport  s from './Todolist.module.css'\r\nimport {Input} from \"./Components/Input\";\r\nimport {EditableSpan} from \"./Components/EditableSpan\";\r\n\r\nexport  type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    todoListsID:string\r\n    title:string\r\n    tasks: Array<TaskType>\r\n    AddNameButton:(todoListsID:string,nameButton:FilterValuesType)=>void\r\n    removeTask:(todoListsID:string,taskId:string)=>void\r\n    AddMessage:(todoListsID:string,valueInput:string)=>void\r\n    Filter:FilterValuesType\r\n    ChangeStatus:(todoListsID:string,id:string,e:boolean)=>void\r\n    deleteTodolist:(todoListsID:string)=>void\r\n\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n\r\n    const onClickHandler = (nameButton:FilterValuesType)=> {\r\n    props.AddNameButton(props.todoListsID,nameButton)\r\n    }\r\n\r\n    const RemoveTask = (taskId:string)=> {\r\n        props.removeTask(props.todoListsID,taskId)\r\n    }\r\n\r\n\r\nconst AddMessage = (valueInput:string)=>{\r\nprops.AddMessage(props.todoListsID,valueInput)\r\n}\r\n\r\n\r\n    const ChangeStatus = (id:string,e:boolean)=> {\r\n  props.ChangeStatus(props.todoListsID,id,e)\r\n    }\r\n\r\n    const deleteTodolist = ()=> {\r\n        props.deleteTodolist(props.todoListsID)\r\n    }\r\n\r\n\r\n    const [enable,SetEnable]=useState(false)\r\n\r\n    const DoubleClickSpan = ()=> {\r\n       SetEnable(!enable)\r\n    }\r\n\r\n   return (\r\n       <div>\r\n           <h3>{props.title}\r\n               <button onClick={deleteTodolist}>Delete</button>\r\n           </h3>\r\n            <Input AddMessage={AddMessage}/>\r\n\r\n           <ul>\r\n               {props.tasks.map((el)=>{\r\n                   return(\r\n                       <li key={el.id} className={el.isDone ? s.status_active:''} >\r\n\r\n\r\n                           {enable? <input value={el.title}/>:<span>{el.title}</span>}\r\n                           <input  type={'checkbox'}  onChange={(e:ChangeEvent<HTMLInputElement>)=>ChangeStatus(el.id,e.currentTarget.checked)}  checked={el.isDone}/>\r\n                           <button onClick={()=>RemoveTask(el.id)}>X</button>\r\n                       </li>\r\n                   )\r\n               })}\r\n\r\n           </ul>\r\n           <button  className={props.Filter==='all' ? s.button_filter:''} onClick={()=>onClickHandler('all')}>All</button>\r\n           <button className={props.Filter==='active' ? s.button_filter:''} onClick={()=>onClickHandler('active')}>Active</button>\r\n           <button className={props.Filter==='completed' ? s.button_filter:''} onClick={()=>onClickHandler('completed')}>Completed</button>\r\n       </div>\r\n\r\n\r\n\r\n   )\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//----------------------------------------------------------------------------------\r\n// import React, {ChangeEvent, KeyboardEvent, useRef, useState} from 'react';\r\n// import {FilterValuesType} from './App';\r\n// import {useAutoAnimate} from \"@formkit/auto-animate/react\";\r\n//\r\n// type TaskType = {\r\n//     id: string\r\n//     title: string\r\n//     isDone: boolean\r\n// }\r\n//\r\n// type PropsType = {\r\n//     title: string\r\n//     tasks: Array<TaskType>\r\n//     removeTask: (taskId: string) => void\r\n//     changeFilter: (value: FilterValuesType) => void\r\n//     addTask: (title: string) => void\r\n//     children?:React.ReactNode\r\n// }\r\n//\r\n// export const Todolist:React.FC<PropsType>=({children, ...props}) =>{\r\n//     const [listRef] = useAutoAnimate<HTMLUListElement>()\r\n//     let onChangeRef = useRef<HTMLInputElement>(null)\r\n//     //let [title, setTitle] = useState(\"\")\r\n//\r\n//     const addTask = () => {\r\n//         // props.addTask(title);\r\n//         // setTitle(\"\");\r\n//         if (onChangeRef.current) {\r\n//             props.addTask(onChangeRef.current.value)\r\n//             onChangeRef.current.value = ''\r\n//         }\r\n//     }\r\n//\r\n//     // const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n//     //     setTitle(e.currentTarget.value)\r\n//     // }\r\n//\r\n//\r\n//     const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n//         if (e.key === 'Enter') {\r\n//             addTask();\r\n//         }\r\n//     }\r\n//\r\n//     const onAllClickHandler = () => props.changeFilter(\"all\");\r\n//     const onActiveClickHandler = () => props.changeFilter(\"active\");\r\n//     const onCompletedClickHandler = () => props.changeFilter(\"completed\");\r\n//\r\n//     return <div>\r\n//         <h3>{props.title}</h3>\r\n//         <div>\r\n//             <input\r\n//                 //value={title}\r\n//                 // onChange={ onChangeHandler }\r\n//                 ref={onChangeRef}\r\n//                 onKeyPress={onKeyPressHandler}\r\n//             />\r\n//             <button onClick={addTask}>+</button>\r\n//         </div>\r\n//         <ul ref={listRef}>\r\n//             {\r\n//                 props.tasks.map(t => {\r\n//\r\n//                     const onClickHandler = () => props.removeTask(t.id)\r\n//\r\n//                     return <li key={t.id} >\r\n//                         <input type=\"checkbox\" checked={t.isDone}/>\r\n//                         <span>{t.title}</span>\r\n//                         <button onClick={onClickHandler}>x</button>\r\n//                     </li>\r\n//                 })\r\n//             }\r\n//         </ul>\r\n//         <div>\r\n//             <button onClick={onAllClickHandler}>All</button>\r\n//             <button onClick={onActiveClickHandler}>Active</button>\r\n//             <button onClick={onCompletedClickHandler}>Completed</button>\r\n//         </div>\r\n//         {children}\r\n//     </div>\r\n// }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}