{"ast":null,"code":"var _jsxFileName = \"/Users/viktoriakapinus/Documents/MyToDolist/todolist/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { v1 } from 'uuid';\nimport { Todolist } from \"./ToDolist\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  let [tasks, setTasks] = useState([{\n    id: v1(),\n    title: \"HTML&CSS\",\n    isDone: true\n  }, {\n    id: v1(),\n    title: \"JS\",\n    isDone: true\n  }, {\n    id: v1(),\n    title: \"ReactJS\",\n    isDone: false\n  }, {\n    id: v1(),\n    title: \"Rest API\",\n    isDone: false\n  }, {\n    id: v1(),\n    title: \"GraphQL\",\n    isDone: false\n  }]);\n  const ChangeCheckbox = () => {};\n  let [nameButtonClick, setNameButton] = useState('All');\n  const SetFilteredButton = nameButton => {\n    setNameButton(nameButton);\n  };\n  const FilteredButton = () => {\n    let filter = tasks;\n    if (nameButtonClick === 'Active') {\n      filter = tasks.filter(el => el.isDone === false);\n    }\n    if (nameButtonClick === 'Completed') {\n      filter = tasks.filter(el => el.isDone === true);\n    }\n    return filter;\n  };\n  const RemoveTask = id => {\n    let remove = tasks.filter(el => el.id != id);\n    setTasks(remove);\n  };\n  const addMessage = inputValue => {\n    let newArrayTask = {\n      id: v1(),\n      title: inputValue,\n      isDone: true\n    };\n    setTasks([...tasks, newArrayTask]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Todolist, {\n      task: FilteredButton(),\n      FilteredButton: SetFilteredButton,\n      RemoveTask: RemoveTask,\n      addMessage: addMessage,\n      ChangeCheckbox: ChangeCheckbox\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"zU94to2XzE0+9YflpyA56sJz6D8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","v1","Todolist","App","tasks","setTasks","id","title","isDone","ChangeCheckbox","nameButtonClick","setNameButton","SetFilteredButton","nameButton","FilteredButton","filter","el","RemoveTask","remove","addMessage","inputValue","newArrayTask"],"sources":["/Users/viktoriakapinus/Documents/MyToDolist/todolist/src/App.tsx"],"sourcesContent":["import React,{useState} from 'react';\nimport './App.css';\nimport {v1} from 'uuid'\nimport {Todolist} from \"./ToDolist\";\n\nexport type ButtonType ='All'|'Active'|'Completed'\n\nfunction App() {\n  let [tasks, setTasks] = useState([\n    {id: v1(), title: \"HTML&CSS\", isDone: true},\n    {id: v1(), title: \"JS\", isDone: true},\n    {id: v1(), title: \"ReactJS\", isDone: false},\n    {id: v1(), title: \"Rest API\", isDone: false},\n    {id: v1(), title: \"GraphQL\", isDone: false},\n  ]);\n\n  const ChangeCheckbox = ()=> {\n    \n  }\n  let[nameButtonClick,setNameButton]=useState<ButtonType>('All')\n\n  const SetFilteredButton = (nameButton:ButtonType)=> {\n   setNameButton(nameButton)\n\n  }\n\n\n  const FilteredButton =()=> {\n    let filter = tasks\n    if(nameButtonClick ==='Active'){filter=tasks.filter((el)=>el.isDone===false)}\n    if(nameButtonClick ==='Completed'){filter=tasks.filter((el)=>el.isDone===true)}\n    return filter\n  }\n\n\n\n  const RemoveTask = (id:string)=> {\n\n   let remove = tasks.filter((el)=>el.id!=id)\n    setTasks(remove)\n  }\n\n  const addMessage = (inputValue:string)=> {\n    let newArrayTask ={id: v1(), title: inputValue, isDone: true}\n    setTasks([...tasks,newArrayTask])\n  }\n  return (\n    <div className=\"App\">\n      <Todolist task={FilteredButton()} FilteredButton={SetFilteredButton }\n                RemoveTask={RemoveTask}\n                addMessage={addMessage}\n                ChangeCheckbox={ChangeCheckbox}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAEC,QAAQ,QAAO,OAAO;AACpC,OAAO,WAAW;AAClB,SAAQC,EAAE,QAAO,MAAM;AACvB,SAAQC,QAAQ,QAAO,YAAY;AAAC;AAIpC,SAASC,GAAG,GAAG;EAAA;EACb,IAAI,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAC,CAC/B;IAACM,EAAE,EAAEL,EAAE,EAAE;IAAEM,KAAK,EAAE,UAAU;IAAEC,MAAM,EAAE;EAAI,CAAC,EAC3C;IAACF,EAAE,EAAEL,EAAE,EAAE;IAAEM,KAAK,EAAE,IAAI;IAAEC,MAAM,EAAE;EAAI,CAAC,EACrC;IAACF,EAAE,EAAEL,EAAE,EAAE;IAAEM,KAAK,EAAE,SAAS;IAAEC,MAAM,EAAE;EAAK,CAAC,EAC3C;IAACF,EAAE,EAAEL,EAAE,EAAE;IAAEM,KAAK,EAAE,UAAU;IAAEC,MAAM,EAAE;EAAK,CAAC,EAC5C;IAACF,EAAE,EAAEL,EAAE,EAAE;IAAEM,KAAK,EAAE,SAAS;IAAEC,MAAM,EAAE;EAAK,CAAC,CAC5C,CAAC;EAEF,MAAMC,cAAc,GAAG,MAAK,CAE5B,CAAC;EACD,IAAG,CAACC,eAAe,EAACC,aAAa,CAAC,GAACX,QAAQ,CAAa,KAAK,CAAC;EAE9D,MAAMY,iBAAiB,GAAIC,UAAqB,IAAI;IACnDF,aAAa,CAACE,UAAU,CAAC;EAE1B,CAAC;EAGD,MAAMC,cAAc,GAAE,MAAK;IACzB,IAAIC,MAAM,GAAGX,KAAK;IAClB,IAAGM,eAAe,KAAI,QAAQ,EAAC;MAACK,MAAM,GAACX,KAAK,CAACW,MAAM,CAAEC,EAAE,IAAGA,EAAE,CAACR,MAAM,KAAG,KAAK,CAAC;IAAA;IAC5E,IAAGE,eAAe,KAAI,WAAW,EAAC;MAACK,MAAM,GAACX,KAAK,CAACW,MAAM,CAAEC,EAAE,IAAGA,EAAE,CAACR,MAAM,KAAG,IAAI,CAAC;IAAA;IAC9E,OAAOO,MAAM;EACf,CAAC;EAID,MAAME,UAAU,GAAIX,EAAS,IAAI;IAEhC,IAAIY,MAAM,GAAGd,KAAK,CAACW,MAAM,CAAEC,EAAE,IAAGA,EAAE,CAACV,EAAE,IAAEA,EAAE,CAAC;IACzCD,QAAQ,CAACa,MAAM,CAAC;EAClB,CAAC;EAED,MAAMC,UAAU,GAAIC,UAAiB,IAAI;IACvC,IAAIC,YAAY,GAAE;MAACf,EAAE,EAAEL,EAAE,EAAE;MAAEM,KAAK,EAAEa,UAAU;MAAEZ,MAAM,EAAE;IAAI,CAAC;IAC7DH,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAACiB,YAAY,CAAC,CAAC;EACnC,CAAC;EACD,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,uBAClB,QAAC,QAAQ;MAAC,IAAI,EAAEP,cAAc,EAAG;MAAC,cAAc,EAAEF,iBAAmB;MAC3D,UAAU,EAAEK,UAAW;MACvB,UAAU,EAAEE,UAAW;MACvB,cAAc,EAAEV;IAAe;MAAA;MAAA;MAAA;IAAA;EACvC;IAAA;IAAA;IAAA;EAAA,QACE;AAEV;AAAC,GAhDQN,GAAG;AAAA,KAAHA,GAAG;AAkDZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}