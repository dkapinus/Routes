{"ast":null,"code":"var _jsxFileName = \"/Users/viktoriakapinus/Documents/MyToDolist/todolist/src/Todolist.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Button } from \"./Button\";\nimport s from './Todolist.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Todolist = props => {\n  _s();\n  let [inputValue, setInputValue] = useState('');\n  let [error, setError] = useState(null);\n  const AddMessage = () => {\n    if (inputValue.trim() !== '') {\n      props.addMessage(inputValue.trim());\n    } else {\n      setError('Title reqired');\n    }\n    setInputValue('');\n  };\n  const ChangeInput = event => {\n    setInputValue(event.currentTarget.value);\n    setError(null);\n  };\n  const KeyDown = event => {\n    if (event.key === 'Enter') {\n      AddMessage();\n    }\n  };\n  const InputCheck = (id, event) => {\n    props.InputCheck(event.currentTarget.checked, id);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: props.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: error ? s.error : '',\n      onChange: ChangeInput,\n      value: inputValue,\n      onKeyDown: KeyDown\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      nameButton: 'Add',\n      started: AddMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: s.errorMessage,\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 26\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [props.task.map(el => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"li\", {\n            className: el.isDone ? s.isDone : '',\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: 'checkbox',\n              onChange: InputCheck,\n              checked: el.isDone\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 31\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: el.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 31\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              nameButton: 'x',\n              started: () => props.removeTask(el.id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 31\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 27\n          }, this)\n        }, el.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 23\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(Button, {\n        active: props.Filter === 'All',\n        nameButton: 'All',\n        started: () => props.ChangeFilter('All')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        active: props.Filter === 'Active',\n        nameButton: 'Active',\n        started: () => props.ChangeFilter('Active')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        active: props.Filter === 'Completed',\n        nameButton: 'Completed',\n        started: () => props.ChangeFilter('Completed')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n_s(Todolist, \"w0DUQDk/y+gPPQ4DbNvOQl5g6As=\");\n_c = Todolist;\nvar _c;\n$RefreshReg$(_c, \"Todolist\");","map":{"version":3,"names":["React","useState","Button","s","Todolist","props","inputValue","setInputValue","error","setError","AddMessage","trim","addMessage","ChangeInput","event","currentTarget","value","KeyDown","key","InputCheck","id","checked","name","errorMessage","task","map","el","isDone","title","removeTask","Filter","ChangeFilter"],"sources":["/Users/viktoriakapinus/Documents/MyToDolist/todolist/src/Todolist.tsx"],"sourcesContent":["import React, {ChangeEvent,KeyboardEvent, useState} from 'react';\nimport {ButtonType} from \"./App\";\nimport {Button} from \"./Button\";\nimport s from './Todolist.module.css';\n\n\ntype TodolistType = {\n    task:Array<TaskType>;\n    name:string;\n    removeTask:(id:string)=>void;\n    ChangeFilter:(nameButton:ButtonType)=>void;\n    addMessage:(inputValue:string)=>void\n    InputCheck:(event:boolean,id:string)=>void\n    Filter:ButtonType;\n}\n\ntype TaskType = {\n    id:string;\n    title:string;\n    isDone:boolean;\n}\n\nexport const Todolist = (props:TodolistType) => {\n\n\n\n\n    let [inputValue,setInputValue]=useState('')\n    let [error,setError]=useState<string|null>(null)\n\n\n    const AddMessage = ()=> {\n        if(inputValue.trim()!=='')\n        {props.addMessage(inputValue.trim())}\n        else {setError('Title reqired')}\n\n        setInputValue('')\n    }\n\n    const ChangeInput = (event:ChangeEvent<HTMLInputElement>)=> {\n        setInputValue(event.currentTarget.value)\n        setError(null)\n    }\n    const KeyDown =(event:KeyboardEvent<HTMLInputElement>)=> {\n\n        if(event.key==='Enter'){\n            AddMessage()\n        }\n    }\n\n\n\n\n    const InputCheck =(id:string,event:ChangeEvent<HTMLInputElement>)=> {\n\n        props.InputCheck(event.currentTarget.checked,id)\n\n    }\n\n\n    return (\n        <div>\n            <h3>{props.name}</h3>\n            <input className={error ? s.error:''} onChange={ChangeInput} value={inputValue} onKeyDown={KeyDown}/>\n            <Button nameButton={'Add'} started={AddMessage}/>\n            <span>\n               {error && <div className={s.errorMessage}>{error}</div>}\n           </span>\n          <div>\n              {props.task.map((el)=>{\n\n                  return (\n                      <div  key={el.id}>\n                          <li  className={el.isDone ? s.isDone:''}>\n                              <input type={'checkbox'} onChange={InputCheck} checked={el.isDone}/>\n                              <span>{el.title}</span>\n\n                              <Button nameButton={'x'} started={()=>props.removeTask(el.id)}/>\n                          </li>\n\n                      </div>\n                  )\n              })}\n               <Button active={props.Filter==='All'} nameButton={'All'} started={()=>props.ChangeFilter('All')}/>\n              <Button active={props.Filter==='Active'} nameButton={'Active'} started={()=>props.ChangeFilter('Active')}/>\n              <Button active={props.Filter==='Completed'} nameButton={'Completed'} started={()=>props.ChangeFilter('Completed')}/>\n\n          </div>\n        </div>\n    );\n};\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAA8BC,QAAQ,QAAO,OAAO;AAEhE,SAAQC,MAAM,QAAO,UAAU;AAC/B,OAAOC,CAAC,MAAM,uBAAuB;AAAC;AAmBtC,OAAO,MAAMC,QAAQ,GAAIC,KAAkB,IAAK;EAAA;EAK5C,IAAI,CAACC,UAAU,EAACC,aAAa,CAAC,GAACN,QAAQ,CAAC,EAAE,CAAC;EAC3C,IAAI,CAACO,KAAK,EAACC,QAAQ,CAAC,GAACR,QAAQ,CAAc,IAAI,CAAC;EAGhD,MAAMS,UAAU,GAAG,MAAK;IACpB,IAAGJ,UAAU,CAACK,IAAI,EAAE,KAAG,EAAE,EACzB;MAACN,KAAK,CAACO,UAAU,CAACN,UAAU,CAACK,IAAI,EAAE,CAAC;IAAA,CAAC,MAChC;MAACF,QAAQ,CAAC,eAAe,CAAC;IAAA;IAE/BF,aAAa,CAAC,EAAE,CAAC;EACrB,CAAC;EAED,MAAMM,WAAW,GAAIC,KAAmC,IAAI;IACxDP,aAAa,CAACO,KAAK,CAACC,aAAa,CAACC,KAAK,CAAC;IACxCP,QAAQ,CAAC,IAAI,CAAC;EAClB,CAAC;EACD,MAAMQ,OAAO,GAAGH,KAAqC,IAAI;IAErD,IAAGA,KAAK,CAACI,GAAG,KAAG,OAAO,EAAC;MACnBR,UAAU,EAAE;IAChB;EACJ,CAAC;EAKD,MAAMS,UAAU,GAAE,CAACC,EAAS,EAACN,KAAmC,KAAI;IAEhET,KAAK,CAACc,UAAU,CAACL,KAAK,CAACC,aAAa,CAACM,OAAO,EAACD,EAAE,CAAC;EAEpD,CAAC;EAGD,oBACI;IAAA,wBACI;MAAA,UAAKf,KAAK,CAACiB;IAAI;MAAA;MAAA;MAAA;IAAA,QAAM,eACrB;MAAO,SAAS,EAAEd,KAAK,GAAGL,CAAC,CAACK,KAAK,GAAC,EAAG;MAAC,QAAQ,EAAEK,WAAY;MAAC,KAAK,EAAEP,UAAW;MAAC,SAAS,EAAEW;IAAQ;MAAA;MAAA;MAAA;IAAA,QAAE,eACrG,QAAC,MAAM;MAAC,UAAU,EAAE,KAAM;MAAC,OAAO,EAAEP;IAAW;MAAA;MAAA;MAAA;IAAA,QAAE,eACjD;MAAA,UACIF,KAAK,iBAAI;QAAK,SAAS,EAAEL,CAAC,CAACoB,YAAa;QAAA,UAAEf;MAAK;QAAA;QAAA;QAAA;MAAA;IAAO;MAAA;MAAA;MAAA;IAAA,QACpD,eACR;MAAA,WACKH,KAAK,CAACmB,IAAI,CAACC,GAAG,CAAEC,EAAE,IAAG;QAElB,oBACI;UAAA,uBACI;YAAK,SAAS,EAAEA,EAAE,CAACC,MAAM,GAAGxB,CAAC,CAACwB,MAAM,GAAC,EAAG;YAAA,wBACpC;cAAO,IAAI,EAAE,UAAW;cAAC,QAAQ,EAAER,UAAW;cAAC,OAAO,EAAEO,EAAE,CAACC;YAAO;cAAA;cAAA;cAAA;YAAA,QAAE,eACpE;cAAA,UAAOD,EAAE,CAACE;YAAK;cAAA;cAAA;cAAA;YAAA,QAAQ,eAEvB,QAAC,MAAM;cAAC,UAAU,EAAE,GAAI;cAAC,OAAO,EAAE,MAAIvB,KAAK,CAACwB,UAAU,CAACH,EAAE,CAACN,EAAE;YAAE;cAAA;cAAA;cAAA;YAAA,QAAE;UAAA;YAAA;YAAA;YAAA;UAAA;QAC/D,GANEM,EAAE,CAACN,EAAE;UAAA;UAAA;UAAA;QAAA,QAQV;MAEd,CAAC,CAAC,eACD,QAAC,MAAM;QAAC,MAAM,EAAEf,KAAK,CAACyB,MAAM,KAAG,KAAM;QAAC,UAAU,EAAE,KAAM;QAAC,OAAO,EAAE,MAAIzB,KAAK,CAAC0B,YAAY,CAAC,KAAK;MAAE;QAAA;QAAA;QAAA;MAAA,QAAE,eACnG,QAAC,MAAM;QAAC,MAAM,EAAE1B,KAAK,CAACyB,MAAM,KAAG,QAAS;QAAC,UAAU,EAAE,QAAS;QAAC,OAAO,EAAE,MAAIzB,KAAK,CAAC0B,YAAY,CAAC,QAAQ;MAAE;QAAA;QAAA;QAAA;MAAA,QAAE,eAC3G,QAAC,MAAM;QAAC,MAAM,EAAE1B,KAAK,CAACyB,MAAM,KAAG,WAAY;QAAC,UAAU,EAAE,WAAY;QAAC,OAAO,EAAE,MAAIzB,KAAK,CAAC0B,YAAY,CAAC,WAAW;MAAE;QAAA;QAAA;QAAA;MAAA,QAAE;IAAA;MAAA;MAAA;MAAA;IAAA,QAElH;EAAA;IAAA;IAAA;IAAA;EAAA,QACF;AAEd,CAAC;AAAC,GApEW3B,QAAQ;AAAA,KAARA,QAAQ;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}