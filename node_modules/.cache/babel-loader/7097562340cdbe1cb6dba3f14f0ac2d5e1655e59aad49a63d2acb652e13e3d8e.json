{"ast":null,"code":"var _jsxFileName = \"/Users/viktoriakapinus/Documents/MyToDolist/todolist/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { v1 } from 'uuid';\nimport { Todolist } from \"./Todolist\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  let [tasks, setTasks] = useState([{\n    id: v1(),\n    title: \"HTML&CSS\",\n    isDone: true\n  }, {\n    id: v1(),\n    title: \"JS\",\n    isDone: true\n  }, {\n    id: v1(),\n    title: \"ReactJS\",\n    isDone: false\n  }, {\n    id: v1(),\n    title: \"Rest API\",\n    isDone: false\n  }, {\n    id: v1(),\n    title: \"GraphQL\",\n    isDone: false\n  }]);\n  const AddMessage = inputValue => {\n    let newTask = {\n      id: v1(),\n      title: inputValue,\n      isDone: true\n    };\n    setTasks([newTask, ...tasks]);\n  };\n  let [filtered, setFiltered] = useState('All');\n  const Filtered = nameButton => {\n    setFiltered(nameButton);\n  };\n  const FilteredTask = () => {\n    let newFilteredTask = tasks;\n    if (filtered === 'Active') {\n      newFilteredTask = tasks.filter(el => el.isDone === false);\n    }\n    if (filtered === 'Completed') {\n      newFilteredTask = tasks.filter(el => el.isDone === true);\n    }\n    return newFilteredTask;\n  };\n  const removeTask = id => {\n    let removeTask = tasks.filter(el => el.id != id);\n    setTasks(removeTask);\n  };\n  // const ChangeCheckBoxValue = (id:string)=> {\n  //     setTasks(tasks.map((el)=>el.id))\n  // }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Todolist, {\n      task: FilteredTask(),\n      Filtered: Filtered,\n      removeTask: removeTask,\n      AddMessage: AddMessage\n      // ChangeCheckBoxValue={ChangeCheckBoxValue}\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"oofMvktsYklNHfTUJ+3h4Dy88e8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","v1","Todolist","App","tasks","setTasks","id","title","isDone","AddMessage","inputValue","newTask","filtered","setFiltered","Filtered","nameButton","FilteredTask","newFilteredTask","filter","el","removeTask"],"sources":["/Users/viktoriakapinus/Documents/MyToDolist/todolist/src/App.tsx"],"sourcesContent":["import React, {ChangeEvent, useState} from 'react';\nimport './App.css';\nimport {v1} from 'uuid'\nimport {Todolist} from \"./Todolist\";\n\n\n\nexport type ButtonType ='All'|'Active'|'Completed'\n\nfunction App() {\n  let [tasks, setTasks] = useState([\n    {id: v1(), title: \"HTML&CSS\", isDone: true},\n    {id: v1(), title: \"JS\", isDone: true},\n    {id: v1(), title: \"ReactJS\", isDone: false},\n    {id: v1(), title: \"Rest API\", isDone: false},\n    {id: v1(), title: \"GraphQL\", isDone: false},\n  ]);\n\n  const AddMessage = (inputValue:string)=> {\n    let newTask ={id: v1(), title:inputValue, isDone: true}\n    setTasks([newTask,...tasks])\n  }\n\n  let [filtered,setFiltered]=useState<ButtonType>('All')\n\n\nconst Filtered = (nameButton:ButtonType)=> {\n\n  setFiltered(nameButton)\n}\n\nconst FilteredTask = ()=> {\n    let newFilteredTask =tasks\n    if(filtered==='Active'){newFilteredTask=tasks.filter((el)=>el.isDone===false)}\n  if(filtered==='Completed'){newFilteredTask=tasks.filter((el)=>el.isDone===true)}\n  return newFilteredTask\n}\n\nconst removeTask = (id:string)=>{\n    let removeTask=tasks.filter((el)=>el.id!=id)\n  setTasks(removeTask)\n}\n// const ChangeCheckBoxValue = (id:string)=> {\n//     setTasks(tasks.map((el)=>el.id))\n// }\n  return (\n    <div className=\"App\">\n    <Todolist task={FilteredTask()} Filtered={Filtered}\n              removeTask={removeTask}\n              AddMessage={AddMessage}\n              // ChangeCheckBoxValue={ChangeCheckBoxValue}\n\n    />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAgBC,QAAQ,QAAO,OAAO;AAClD,OAAO,WAAW;AAClB,SAAQC,EAAE,QAAO,MAAM;AACvB,SAAQC,QAAQ,QAAO,YAAY;AAAC;AAMpC,SAASC,GAAG,GAAG;EAAA;EACb,IAAI,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAC,CAC/B;IAACM,EAAE,EAAEL,EAAE,EAAE;IAAEM,KAAK,EAAE,UAAU;IAAEC,MAAM,EAAE;EAAI,CAAC,EAC3C;IAACF,EAAE,EAAEL,EAAE,EAAE;IAAEM,KAAK,EAAE,IAAI;IAAEC,MAAM,EAAE;EAAI,CAAC,EACrC;IAACF,EAAE,EAAEL,EAAE,EAAE;IAAEM,KAAK,EAAE,SAAS;IAAEC,MAAM,EAAE;EAAK,CAAC,EAC3C;IAACF,EAAE,EAAEL,EAAE,EAAE;IAAEM,KAAK,EAAE,UAAU;IAAEC,MAAM,EAAE;EAAK,CAAC,EAC5C;IAACF,EAAE,EAAEL,EAAE,EAAE;IAAEM,KAAK,EAAE,SAAS;IAAEC,MAAM,EAAE;EAAK,CAAC,CAC5C,CAAC;EAEF,MAAMC,UAAU,GAAIC,UAAiB,IAAI;IACvC,IAAIC,OAAO,GAAE;MAACL,EAAE,EAAEL,EAAE,EAAE;MAAEM,KAAK,EAACG,UAAU;MAAEF,MAAM,EAAE;IAAI,CAAC;IACvDH,QAAQ,CAAC,CAACM,OAAO,EAAC,GAAGP,KAAK,CAAC,CAAC;EAC9B,CAAC;EAED,IAAI,CAACQ,QAAQ,EAACC,WAAW,CAAC,GAACb,QAAQ,CAAa,KAAK,CAAC;EAGxD,MAAMc,QAAQ,GAAIC,UAAqB,IAAI;IAEzCF,WAAW,CAACE,UAAU,CAAC;EACzB,CAAC;EAED,MAAMC,YAAY,GAAG,MAAK;IACtB,IAAIC,eAAe,GAAEb,KAAK;IAC1B,IAAGQ,QAAQ,KAAG,QAAQ,EAAC;MAACK,eAAe,GAACb,KAAK,CAACc,MAAM,CAAEC,EAAE,IAAGA,EAAE,CAACX,MAAM,KAAG,KAAK,CAAC;IAAA;IAC/E,IAAGI,QAAQ,KAAG,WAAW,EAAC;MAACK,eAAe,GAACb,KAAK,CAACc,MAAM,CAAEC,EAAE,IAAGA,EAAE,CAACX,MAAM,KAAG,IAAI,CAAC;IAAA;IAC/E,OAAOS,eAAe;EACxB,CAAC;EAED,MAAMG,UAAU,GAAId,EAAS,IAAG;IAC5B,IAAIc,UAAU,GAAChB,KAAK,CAACc,MAAM,CAAEC,EAAE,IAAGA,EAAE,CAACb,EAAE,IAAEA,EAAE,CAAC;IAC9CD,QAAQ,CAACe,UAAU,CAAC;EACtB,CAAC;EACD;EACA;EACA;EACE,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,uBACpB,QAAC,QAAQ;MAAC,IAAI,EAAEJ,YAAY,EAAG;MAAC,QAAQ,EAAEF,QAAS;MACzC,UAAU,EAAEM,UAAW;MACvB,UAAU,EAAEX;MACZ;IAAA;MAAA;MAAA;MAAA;IAAA;EAER;IAAA;IAAA;IAAA;EAAA,QACI;AAEV;AAAC,GA9CQN,GAAG;AAAA,KAAHA,GAAG;AAgDZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}