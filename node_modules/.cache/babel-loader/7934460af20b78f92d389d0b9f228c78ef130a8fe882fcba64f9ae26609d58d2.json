{"ast":null,"code":"var _jsxFileName = \"/Users/viktoriakapinus/Documents/MyToDolist/todolist/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { Todolist } from './Todolist';\nimport { v1 } from 'uuid';\n\n// Hi guys!\n//1.Let`s wrap up our bunch  of filters in a function.\n//How can we do this? We can wrap all our goodies into a new function:\n//     const filteredTasks=()=>{\n//          let tasksForTodolist = tasks;\n//\n//          if (filter === \"active\") {\n//          return   tasksForTodolist = tasks.filter(t => !t.isDone);\n//          }\n//          if (filter === \"completed\") {\n//            return  tasksForTodolist = tasks.filter(t => t.isDone);\n//          }\n//          return tasksForTodolist\n//     }\n\n//2.Let`s replace our if`s with  switch.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  let [tasks, setTasks] = useState([{\n    id: v1(),\n    title: \"HTML&CSS\",\n    isDone: true\n  }, {\n    id: v1(),\n    title: \"JS\",\n    isDone: true\n  }, {\n    id: v1(),\n    title: \"ReactJS\",\n    isDone: false\n  }, {\n    id: v1(),\n    title: \"Rest API\",\n    isDone: false\n  }, {\n    id: v1(),\n    title: \"GraphQL\",\n    isDone: false\n  }]);\n  function removeTask(id) {\n    let filteredTasks = tasks.filter(t => t.id != id);\n    setTasks(filteredTasks);\n  }\n  function addTask(title) {\n    let task = {\n      id: v1(),\n      title: title,\n      isDone: false\n    };\n    let newTasks = [task, ...tasks];\n    setTasks(newTasks);\n  }\n  let [filter, setFilter] = useState(\"all\");\n  let tasksForTodolist = tasks;\n  if (filter === \"active\") {\n    tasksForTodolist = tasks.filter(t => t.isDone === false);\n  }\n  if (filter === \"completed\") {\n    tasksForTodolist = tasks.filter(t => t.isDone === true);\n  }\n  function changeFilter(value) {\n    setFilter(value);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Todolist, {\n      title: \"What to learn\",\n      tasks: tasksForTodolist,\n      removeTask: removeTask,\n      changeFilter: changeFilter,\n      addTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"Bnle718jrbwycNiQcPnEsHbz2nw=\");\n_c = App;\nexport default App;\n\n//------------------------------------------------------------------------------------------\n\n// import React, {useState} from 'react';\n// import './App.css';\n// import {Todolist} from './Todolist';\n// import {v1} from 'uuid';\n//\n// export type FilterValuesType = \"all\" | \"active\" | \"completed\";\n//\n// function App() {\n//\n//     let [tasks, setTasks] = useState([\n//         {id: v1(), title: \"HTML&CSS\", isDone: true},\n//         {id: v1(), title: \"JS\", isDone: true},\n//         {id: v1(), title: \"ReactJS\", isDone: false},\n//         {id: v1(), title: \"Rest API\", isDone: false},\n//         {id: v1(), title: \"GraphQL\", isDone: false},\n//     ]);\n//     let [filter, setFilter] = useState<FilterValuesType>(\"all\");\n//\n//\n//     function removeTask(id: string) {\n//         let filteredTasks = tasks.filter(t => t.id != id);\n//         setTasks(filteredTasks);\n//     }\n//\n//     function addTask(title: string) {\n//         let task = {id: v1(), title: title, isDone: false};\n//         let newTasks = [task, ...tasks];\n//         setTasks(newTasks);\n//     }\n//\n//     function changeStatus(taskId: string, isDone: boolean) {\n//         let task = tasks.find(t => t.id === taskId);\n//         if (task) {\n//             task.isDone = isDone;\n//         }\n//\n//         setTasks([...tasks]);\n//     }\n//\n//\n//     const filteredTasks=()=>{\n//         // let tasksForTodolist = tasks;\n//         //\n//         // if (filter === \"active\") {\n//         //  return   tasksForTodolist = tasks.filter(t => !t.isDone);\n//         // }\n//         // if (filter === \"completed\") {\n//         //   return  tasksForTodolist = tasks.filter(t => t.isDone);\n//         // }\n//         // return tasksForTodolist\n//\n//         let tasksForTodolist = tasks;\n//         switch (filter) {\n//             case 'active': {\n//                 return   tasksForTodolist = tasks.filter(t => !t.isDone);\n//             }\n//             case 'completed': {\n//                 return  tasksForTodolist = tasks.filter(t => t.isDone);\n//             }\n//             default:return tasksForTodolist\n//         }\n//     }\n//\n//\n//     function changeFilter(value: FilterValuesType) {\n//         setFilter(value);\n//     }\n//\n//\n//     return (\n//         <div className=\"App\">\n//             <Todolist title=\"What to learn\"\n//                       tasks={filteredTasks()}\n//                       removeTask={removeTask}\n//                       changeFilter={changeFilter}\n//                       addTask={addTask}\n//                       />\n//         </div>\n//     );\n// }\n//\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Todolist","v1","App","tasks","setTasks","id","title","isDone","removeTask","filteredTasks","filter","t","addTask","task","newTasks","setFilter","tasksForTodolist","changeFilter","value"],"sources":["/Users/viktoriakapinus/Documents/MyToDolist/todolist/src/App.tsx"],"sourcesContent":["import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport { v1 } from 'uuid';\r\n\r\n\r\n// Hi guys!\r\n//1.Let`s wrap up our bunch  of filters in a function.\r\n//How can we do this? We can wrap all our goodies into a new function:\r\n//     const filteredTasks=()=>{\r\n//          let tasksForTodolist = tasks;\r\n//\r\n//          if (filter === \"active\") {\r\n//          return   tasksForTodolist = tasks.filter(t => !t.isDone);\r\n//          }\r\n//          if (filter === \"completed\") {\r\n//            return  tasksForTodolist = tasks.filter(t => t.isDone);\r\n//          }\r\n//          return tasksForTodolist\r\n//     }\r\n\r\n//2.Let`s replace our if`s with  switch.\r\n\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nfunction App() {\r\n\r\n    let [tasks, setTasks] = useState([\r\n        { id: v1(), title: \"HTML&CSS\", isDone: true },\r\n        { id: v1(), title: \"JS\", isDone: true },\r\n        { id: v1(), title: \"ReactJS\", isDone: false },\r\n        { id: v1(), title: \"Rest API\", isDone: false },\r\n        { id: v1(), title: \"GraphQL\", isDone: false },\r\n    ]);\r\n\r\n    function removeTask(id: string) {\r\n        let filteredTasks = tasks.filter(t => t.id != id);\r\n        setTasks(filteredTasks);\r\n    }\r\n\r\n    function addTask(title: string) {\r\n        let task = { id: v1(), title: title, isDone: false };\r\n        let newTasks = [task, ...tasks];\r\n        setTasks(newTasks);\r\n    }\r\n\r\n    let [filter, setFilter] = useState<FilterValuesType>(\"all\");\r\n\r\n    let tasksForTodolist = tasks;\r\n\r\n    if (filter === \"active\") {\r\n        tasksForTodolist = tasks.filter(t => t.isDone === false);\r\n    }\r\n    if (filter === \"completed\") {\r\n        tasksForTodolist = tasks.filter(t => t.isDone === true);\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType) {\r\n        setFilter(value);\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Todolist title=\"What to learn\"\r\n                      tasks={tasksForTodolist}\r\n                      removeTask={removeTask}\r\n                      changeFilter={changeFilter}\r\n                      addTask={addTask} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n\r\n//------------------------------------------------------------------------------------------\r\n\r\n// import React, {useState} from 'react';\r\n// import './App.css';\r\n// import {Todolist} from './Todolist';\r\n// import {v1} from 'uuid';\r\n//\r\n// export type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n//\r\n// function App() {\r\n//\r\n//     let [tasks, setTasks] = useState([\r\n//         {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n//         {id: v1(), title: \"JS\", isDone: true},\r\n//         {id: v1(), title: \"ReactJS\", isDone: false},\r\n//         {id: v1(), title: \"Rest API\", isDone: false},\r\n//         {id: v1(), title: \"GraphQL\", isDone: false},\r\n//     ]);\r\n//     let [filter, setFilter] = useState<FilterValuesType>(\"all\");\r\n//\r\n//\r\n//     function removeTask(id: string) {\r\n//         let filteredTasks = tasks.filter(t => t.id != id);\r\n//         setTasks(filteredTasks);\r\n//     }\r\n//\r\n//     function addTask(title: string) {\r\n//         let task = {id: v1(), title: title, isDone: false};\r\n//         let newTasks = [task, ...tasks];\r\n//         setTasks(newTasks);\r\n//     }\r\n//\r\n//     function changeStatus(taskId: string, isDone: boolean) {\r\n//         let task = tasks.find(t => t.id === taskId);\r\n//         if (task) {\r\n//             task.isDone = isDone;\r\n//         }\r\n//\r\n//         setTasks([...tasks]);\r\n//     }\r\n//\r\n//\r\n//     const filteredTasks=()=>{\r\n//         // let tasksForTodolist = tasks;\r\n//         //\r\n//         // if (filter === \"active\") {\r\n//         //  return   tasksForTodolist = tasks.filter(t => !t.isDone);\r\n//         // }\r\n//         // if (filter === \"completed\") {\r\n//         //   return  tasksForTodolist = tasks.filter(t => t.isDone);\r\n//         // }\r\n//         // return tasksForTodolist\r\n//\r\n//         let tasksForTodolist = tasks;\r\n//         switch (filter) {\r\n//             case 'active': {\r\n//                 return   tasksForTodolist = tasks.filter(t => !t.isDone);\r\n//             }\r\n//             case 'completed': {\r\n//                 return  tasksForTodolist = tasks.filter(t => t.isDone);\r\n//             }\r\n//             default:return tasksForTodolist\r\n//         }\r\n//     }\r\n//\r\n//\r\n//     function changeFilter(value: FilterValuesType) {\r\n//         setFilter(value);\r\n//     }\r\n//\r\n//\r\n//     return (\r\n//         <div className=\"App\">\r\n//             <Todolist title=\"What to learn\"\r\n//                       tasks={filteredTasks()}\r\n//                       removeTask={removeTask}\r\n//                       changeFilter={changeFilter}\r\n//                       addTask={addTask}\r\n//                       />\r\n//         </div>\r\n//     );\r\n// }\r\n//\r\n// export default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,OAAO,WAAW;AAClB,SAAQC,QAAQ,QAAO,YAAY;AACnC,SAASC,EAAE,QAAQ,MAAM;;AAGzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAKA,SAASC,GAAG,GAAG;EAAA;EAEX,IAAI,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAC,CAC7B;IAAEM,EAAE,EAAEJ,EAAE,EAAE;IAAEK,KAAK,EAAE,UAAU;IAAEC,MAAM,EAAE;EAAK,CAAC,EAC7C;IAAEF,EAAE,EAAEJ,EAAE,EAAE;IAAEK,KAAK,EAAE,IAAI;IAAEC,MAAM,EAAE;EAAK,CAAC,EACvC;IAAEF,EAAE,EAAEJ,EAAE,EAAE;IAAEK,KAAK,EAAE,SAAS;IAAEC,MAAM,EAAE;EAAM,CAAC,EAC7C;IAAEF,EAAE,EAAEJ,EAAE,EAAE;IAAEK,KAAK,EAAE,UAAU;IAAEC,MAAM,EAAE;EAAM,CAAC,EAC9C;IAAEF,EAAE,EAAEJ,EAAE,EAAE;IAAEK,KAAK,EAAE,SAAS;IAAEC,MAAM,EAAE;EAAM,CAAC,CAChD,CAAC;EAEF,SAASC,UAAU,CAACH,EAAU,EAAE;IAC5B,IAAII,aAAa,GAAGN,KAAK,CAACO,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACN,EAAE,IAAIA,EAAE,CAAC;IACjDD,QAAQ,CAACK,aAAa,CAAC;EAC3B;EAEA,SAASG,OAAO,CAACN,KAAa,EAAE;IAC5B,IAAIO,IAAI,GAAG;MAAER,EAAE,EAAEJ,EAAE,EAAE;MAAEK,KAAK,EAAEA,KAAK;MAAEC,MAAM,EAAE;IAAM,CAAC;IACpD,IAAIO,QAAQ,GAAG,CAACD,IAAI,EAAE,GAAGV,KAAK,CAAC;IAC/BC,QAAQ,CAACU,QAAQ,CAAC;EACtB;EAEA,IAAI,CAACJ,MAAM,EAAEK,SAAS,CAAC,GAAGhB,QAAQ,CAAmB,KAAK,CAAC;EAE3D,IAAIiB,gBAAgB,GAAGb,KAAK;EAE5B,IAAIO,MAAM,KAAK,QAAQ,EAAE;IACrBM,gBAAgB,GAAGb,KAAK,CAACO,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACJ,MAAM,KAAK,KAAK,CAAC;EAC5D;EACA,IAAIG,MAAM,KAAK,WAAW,EAAE;IACxBM,gBAAgB,GAAGb,KAAK,CAACO,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACJ,MAAM,KAAK,IAAI,CAAC;EAC3D;EAEA,SAASU,YAAY,CAACC,KAAuB,EAAE;IAC3CH,SAAS,CAACG,KAAK,CAAC;EACpB;EAIA,oBACI;IAAK,SAAS,EAAC,KAAK;IAAA,uBAChB,QAAC,QAAQ;MAAC,KAAK,EAAC,eAAe;MACrB,KAAK,EAAEF,gBAAiB;MACxB,UAAU,EAAER,UAAW;MACvB,YAAY,EAAES,YAAa;MAC3B,OAAO,EAAEL;IAAQ;MAAA;MAAA;MAAA;IAAA;EAAG;IAAA;IAAA;IAAA;EAAA,QAC5B;AAEd;AAAC,GA/CQV,GAAG;AAAA,KAAHA,GAAG;AAiDZ,eAAeA,GAAG;;AAOlB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}