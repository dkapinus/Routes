{"ast":null,"code":"var _jsxFileName = \"/Users/viktoriakapinus/Documents/MyToDolist/todolist/src/ToDolist.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Button } from \"./Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Todolist = props => {\n  _s();\n  const MapTask = props.task.map(el => {\n    const changeCheckbox = event => {\n      props.ChangeCheckbox(event.currentTarget.checked, taskId);\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [el.title, /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: changeCheckbox,\n          type: \"checkbox\",\n          checked: el.isDone\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => props.RemoveTask(el.id),\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 25\n        }, this)]\n      }, el.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 22\n    }, this);\n  });\n  let [inputValue, setInputValue] = useState('');\n  const onChangeHandlerInput = event => {\n    setInputValue(event.currentTarget.value);\n  };\n  const AddMessage = () => {\n    props.addMessage(inputValue);\n    setInputValue('');\n  };\n  const FilteredButton = nameButton => {\n    props.FilteredButton(nameButton);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: onChangeHandlerInput,\n      value: inputValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: AddMessage,\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: MapTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      nameButton: 'All',\n      started: FilteredButton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      nameButton: 'Active',\n      started: FilteredButton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      nameButton: 'Completed',\n      started: FilteredButton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n_s(Todolist, \"fNxyqMdOrVgwzU9I4cKuq4oRPjc=\");\n_c = Todolist;\nvar _c;\n$RefreshReg$(_c, \"Todolist\");","map":{"version":3,"names":["React","useState","Button","Todolist","props","MapTask","task","map","el","changeCheckbox","event","ChangeCheckbox","currentTarget","checked","taskId","title","isDone","RemoveTask","id","inputValue","setInputValue","onChangeHandlerInput","value","AddMessage","addMessage","FilteredButton","nameButton"],"sources":["/Users/viktoriakapinus/Documents/MyToDolist/todolist/src/ToDolist.tsx"],"sourcesContent":["import React, {ChangeEvent, useState} from 'react';\nimport {Button} from \"./Button\";\nimport {ButtonType} from \"./App\";\n\ntype TodolistType = {\n    task:Array<ArrayTaskType>\n    FilteredButton:(nameButton:ButtonType)=>void\n    RemoveTask:(id:string)=>void\n    addMessage:(inputValue:string)=>void\n    ChangeCheckbox:(event:boolean,taskId:string)=>void;\n}\n\ntype ArrayTaskType = {\n    id:string\n    title:string;\n    isDone:boolean\n}\n\n\nexport  const Todolist = (props:TodolistType) => {\n\n\n\n\n\n\n      const MapTask =  props.task.map((el)=>{\n          const changeCheckbox = (event:ChangeEvent<HTMLInputElement>)=> {\n              props.ChangeCheckbox(event.currentTarget.checked,taskId)\n          }\n            return ( <div>\n                    <li key={el.id}>{el.title}\n                        <input onChange={changeCheckbox} type={\"checkbox\"} checked={el.isDone}/>\n                        <button onClick={()=>props.RemoveTask(el.id)}>X</button>\n                    </li>\n\n                </div>\n            )\n        })\n\n\n\n\n\n\n    let [inputValue,setInputValue] = useState('')\n\n    const onChangeHandlerInput = (event:ChangeEvent<HTMLInputElement>)=> {\n        setInputValue(event.currentTarget.value)\n    }\n\n    const AddMessage = ()=> {\n        props.addMessage(inputValue)\n        setInputValue('')\n    }\n\n    const FilteredButton = (nameButton:ButtonType)=> {\n\n        props.FilteredButton(nameButton)\n\n\n    }\n    return (\n        <div>\n             <input onChange={onChangeHandlerInput} value={inputValue}/>\n            <button onClick={AddMessage}>Add</button>\n            <div>\n                {MapTask}\n\n            </div>\n            <Button nameButton={'All'} started={FilteredButton}/>\n            <Button nameButton={'Active'} started={FilteredButton}/>\n            <Button nameButton={'Completed'} started={FilteredButton}/>\n\n        </div>\n    );\n};\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAgBC,QAAQ,QAAO,OAAO;AAClD,SAAQC,MAAM,QAAO,UAAU;AAAC;AAkBhC,OAAQ,MAAMC,QAAQ,GAAIC,KAAkB,IAAK;EAAA;EAO3C,MAAMC,OAAO,GAAID,KAAK,CAACE,IAAI,CAACC,GAAG,CAAEC,EAAE,IAAG;IAClC,MAAMC,cAAc,GAAIC,KAAmC,IAAI;MAC3DN,KAAK,CAACO,cAAc,CAACD,KAAK,CAACE,aAAa,CAACC,OAAO,EAACC,MAAM,CAAC;IAC5D,CAAC;IACC,oBAAS;MAAA,uBACD;QAAA,WAAiBN,EAAE,CAACO,KAAK,eACrB;UAAO,QAAQ,EAAEN,cAAe;UAAC,IAAI,EAAE,UAAW;UAAC,OAAO,EAAED,EAAE,CAACQ;QAAO;UAAA;UAAA;UAAA;QAAA,QAAE,eACxE;UAAQ,OAAO,EAAE,MAAIZ,KAAK,CAACa,UAAU,CAACT,EAAE,CAACU,EAAE,CAAE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAW;MAAA,GAFnDV,EAAE,CAACU,EAAE;QAAA;QAAA;QAAA;MAAA;IAGT;MAAA;MAAA;MAAA;IAAA,QAEH;EAEd,CAAC,CAAC;EAON,IAAI,CAACC,UAAU,EAACC,aAAa,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAE7C,MAAMoB,oBAAoB,GAAIX,KAAmC,IAAI;IACjEU,aAAa,CAACV,KAAK,CAACE,aAAa,CAACU,KAAK,CAAC;EAC5C,CAAC;EAED,MAAMC,UAAU,GAAG,MAAK;IACpBnB,KAAK,CAACoB,UAAU,CAACL,UAAU,CAAC;IAC5BC,aAAa,CAAC,EAAE,CAAC;EACrB,CAAC;EAED,MAAMK,cAAc,GAAIC,UAAqB,IAAI;IAE7CtB,KAAK,CAACqB,cAAc,CAACC,UAAU,CAAC;EAGpC,CAAC;EACD,oBACI;IAAA,wBACK;MAAO,QAAQ,EAAEL,oBAAqB;MAAC,KAAK,EAAEF;IAAW;MAAA;MAAA;MAAA;IAAA,QAAE,eAC5D;MAAQ,OAAO,EAAEI,UAAW;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAa,eACzC;MAAA,UACKlB;IAAO;MAAA;MAAA;MAAA;IAAA,QAEN,eACN,QAAC,MAAM;MAAC,UAAU,EAAE,KAAM;MAAC,OAAO,EAAEoB;IAAe;MAAA;MAAA;MAAA;IAAA,QAAE,eACrD,QAAC,MAAM;MAAC,UAAU,EAAE,QAAS;MAAC,OAAO,EAAEA;IAAe;MAAA;MAAA;MAAA;IAAA,QAAE,eACxD,QAAC,MAAM;MAAC,UAAU,EAAE,WAAY;MAAC,OAAO,EAAEA;IAAe;MAAA;MAAA;MAAA;IAAA,QAAE;EAAA;IAAA;IAAA;IAAA;EAAA,QAEzD;AAEd,CAAC;AAAC,GAzDYtB,QAAQ;AAAA,KAARA,QAAQ;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}