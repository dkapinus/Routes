{"ast":null,"code":"var _jsxFileName = \"/Users/viktoriakapinus/Documents/MyToDolist/todolist/src/Todolist.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport s from './Todolist.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Todolist(props) {\n  _s();\n  const onClickHandler = nameButton => {\n    props.AddNameButton(nameButton);\n  };\n  const RemoveTask = taskId => {\n    props.removeTask(taskId);\n  };\n  let [valueInput, setValueInput] = useState('');\n  const onChangeHandler = e => {\n    setValueInput(e.currentTarget.value);\n  };\n  let [error, setError] = useState('');\n  const AddMessage = () => {\n    if (valueInput.trim() !== '') {\n      props.AddMessage(valueInput.trim());\n    } else setError('Title is reqied');\n    setValueInput('');\n  };\n  const onKeyDown = e => {\n    if (e.key === 'Enter') {\n      AddMessage();\n    }\n  };\n  const ChangeStatus = () => {};\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: props.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: onChangeHandler,\n      onKeyDown: onKeyDown,\n      value: valueInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: AddMessage,\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 12\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.error_message,\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: props.tasks.map(el => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [el.title, /*#__PURE__*/_jsxDEV(\"input\", {\n            className: error ? s.error_input : '',\n            type: 'checkbox',\n            onChange: ChangeStatus,\n            checked: el.isDone\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 28\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => RemoveTask(el.id),\n            children: \"X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 28\n          }, this)]\n        }, el.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 24\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => onClickHandler('all'),\n      children: \"All\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => onClickHandler('active'),\n      children: \"Active\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => onClickHandler('completed'),\n      children: \"Completed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 12\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 8\n  }, this);\n}\n\n//----------------------------------------------------------------------------------\n// import React, {ChangeEvent, KeyboardEvent, useRef, useState} from 'react';\n// import {FilterValuesType} from './App';\n// import {useAutoAnimate} from \"@formkit/auto-animate/react\";\n//\n// type TaskType = {\n//     id: string\n//     title: string\n//     isDone: boolean\n// }\n//\n// type PropsType = {\n//     title: string\n//     tasks: Array<TaskType>\n//     removeTask: (taskId: string) => void\n//     changeFilter: (value: FilterValuesType) => void\n//     addTask: (title: string) => void\n//     children?:React.ReactNode\n// }\n//\n// export const Todolist:React.FC<PropsType>=({children, ...props}) =>{\n//     const [listRef] = useAutoAnimate<HTMLUListElement>()\n//     let onChangeRef = useRef<HTMLInputElement>(null)\n//     //let [title, setTitle] = useState(\"\")\n//\n//     const addTask = () => {\n//         // props.addTask(title);\n//         // setTitle(\"\");\n//         if (onChangeRef.current) {\n//             props.addTask(onChangeRef.current.value)\n//             onChangeRef.current.value = ''\n//         }\n//     }\n//\n//     // const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n//     //     setTitle(e.currentTarget.value)\n//     // }\n//\n//\n//     const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n//         if (e.key === 'Enter') {\n//             addTask();\n//         }\n//     }\n//\n//     const onAllClickHandler = () => props.changeFilter(\"all\");\n//     const onActiveClickHandler = () => props.changeFilter(\"active\");\n//     const onCompletedClickHandler = () => props.changeFilter(\"completed\");\n//\n//     return <div>\n//         <h3>{props.title}</h3>\n//         <div>\n//             <input\n//                 //value={title}\n//                 // onChange={ onChangeHandler }\n//                 ref={onChangeRef}\n//                 onKeyPress={onKeyPressHandler}\n//             />\n//             <button onClick={addTask}>+</button>\n//         </div>\n//         <ul ref={listRef}>\n//             {\n//                 props.tasks.map(t => {\n//\n//                     const onClickHandler = () => props.removeTask(t.id)\n//\n//                     return <li key={t.id} >\n//                         <input type=\"checkbox\" checked={t.isDone}/>\n//                         <span>{t.title}</span>\n//                         <button onClick={onClickHandler}>x</button>\n//                     </li>\n//                 })\n//             }\n//         </ul>\n//         <div>\n//             <button onClick={onAllClickHandler}>All</button>\n//             <button onClick={onActiveClickHandler}>Active</button>\n//             <button onClick={onCompletedClickHandler}>Completed</button>\n//         </div>\n//         {children}\n//     </div>\n// }\n_s(Todolist, \"geukEC1keZR/OauyzKwWYY5rmvc=\");\n_c = Todolist;\nvar _c;\n$RefreshReg$(_c, \"Todolist\");","map":{"version":3,"names":["React","useState","s","Todolist","props","onClickHandler","nameButton","AddNameButton","RemoveTask","taskId","removeTask","valueInput","setValueInput","onChangeHandler","e","currentTarget","value","error","setError","AddMessage","trim","onKeyDown","key","ChangeStatus","title","error_message","tasks","map","el","error_input","isDone","id"],"sources":["/Users/viktoriakapinus/Documents/MyToDolist/todolist/src/Todolist.tsx"],"sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport  s from './Todolist.module.css'\r\n\r\ntype TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    title:string\r\n    tasks: Array<TaskType>\r\n    AddNameButton:(nameButton:FilterValuesType)=>void\r\n    removeTask:(taskId:string)=>void\r\n    AddMessage:(valueInput:string)=>void\r\n\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n\r\n    const onClickHandler = (nameButton:FilterValuesType)=> {\r\n    props.AddNameButton(nameButton)\r\n    }\r\n\r\n    const RemoveTask = (taskId:string)=> {\r\n        props.removeTask(taskId)\r\n    }\r\n\r\n    let[valueInput,setValueInput]=useState('')\r\n\r\n    const onChangeHandler = (e:ChangeEvent<HTMLInputElement>)=> {\r\n        setValueInput(e.currentTarget.value)\r\n    }\r\n\r\n    let [error,setError]=useState<string|null>('')\r\n\r\n    const AddMessage = ()=> {\r\n        if(valueInput.trim() !==''){ props.AddMessage(valueInput.trim())}\r\n        else (setError('Title is reqied'))\r\nsetValueInput('')\r\n    }\r\n\r\n    const onKeyDown = (e:KeyboardEvent<HTMLInputElement>)=> {\r\n        if(e.key ==='Enter'){AddMessage()}\r\n\r\n    }\r\n    const ChangeStatus = ()=> {\r\n\r\n    }\r\n\r\n   return (\r\n       <div>\r\n           <h3>{props.title}</h3>\r\n           <input onChange={onChangeHandler} onKeyDown={onKeyDown}  value={valueInput}/>\r\n           <button  onClick={AddMessage}>Add</button>\r\n           {error && <div className={s.error_message}>{error}</div>}\r\n           <ul>\r\n               {props.tasks.map((el)=>{\r\n                   return(\r\n                       <li key={el.id}>\r\n                           {el.title}\r\n                           <input  className={error ? s.error_input : ''} type={'checkbox'}  onChange={ChangeStatus}  checked={el.isDone}/>\r\n                           <button onClick={()=>RemoveTask(el.id)}>X</button>\r\n                       </li>\r\n                   )\r\n               })}\r\n\r\n           </ul>\r\n           <button onClick={()=>onClickHandler('all')}>All</button>\r\n           <button onClick={()=>onClickHandler('active')}>Active</button>\r\n           <button onClick={()=>onClickHandler('completed')}>Completed</button>\r\n       </div>\r\n\r\n\r\n\r\n   )\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//----------------------------------------------------------------------------------\r\n// import React, {ChangeEvent, KeyboardEvent, useRef, useState} from 'react';\r\n// import {FilterValuesType} from './App';\r\n// import {useAutoAnimate} from \"@formkit/auto-animate/react\";\r\n//\r\n// type TaskType = {\r\n//     id: string\r\n//     title: string\r\n//     isDone: boolean\r\n// }\r\n//\r\n// type PropsType = {\r\n//     title: string\r\n//     tasks: Array<TaskType>\r\n//     removeTask: (taskId: string) => void\r\n//     changeFilter: (value: FilterValuesType) => void\r\n//     addTask: (title: string) => void\r\n//     children?:React.ReactNode\r\n// }\r\n//\r\n// export const Todolist:React.FC<PropsType>=({children, ...props}) =>{\r\n//     const [listRef] = useAutoAnimate<HTMLUListElement>()\r\n//     let onChangeRef = useRef<HTMLInputElement>(null)\r\n//     //let [title, setTitle] = useState(\"\")\r\n//\r\n//     const addTask = () => {\r\n//         // props.addTask(title);\r\n//         // setTitle(\"\");\r\n//         if (onChangeRef.current) {\r\n//             props.addTask(onChangeRef.current.value)\r\n//             onChangeRef.current.value = ''\r\n//         }\r\n//     }\r\n//\r\n//     // const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n//     //     setTitle(e.currentTarget.value)\r\n//     // }\r\n//\r\n//\r\n//     const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n//         if (e.key === 'Enter') {\r\n//             addTask();\r\n//         }\r\n//     }\r\n//\r\n//     const onAllClickHandler = () => props.changeFilter(\"all\");\r\n//     const onActiveClickHandler = () => props.changeFilter(\"active\");\r\n//     const onCompletedClickHandler = () => props.changeFilter(\"completed\");\r\n//\r\n//     return <div>\r\n//         <h3>{props.title}</h3>\r\n//         <div>\r\n//             <input\r\n//                 //value={title}\r\n//                 // onChange={ onChangeHandler }\r\n//                 ref={onChangeRef}\r\n//                 onKeyPress={onKeyPressHandler}\r\n//             />\r\n//             <button onClick={addTask}>+</button>\r\n//         </div>\r\n//         <ul ref={listRef}>\r\n//             {\r\n//                 props.tasks.map(t => {\r\n//\r\n//                     const onClickHandler = () => props.removeTask(t.id)\r\n//\r\n//                     return <li key={t.id} >\r\n//                         <input type=\"checkbox\" checked={t.isDone}/>\r\n//                         <span>{t.title}</span>\r\n//                         <button onClick={onClickHandler}>x</button>\r\n//                     </li>\r\n//                 })\r\n//             }\r\n//         </ul>\r\n//         <div>\r\n//             <button onClick={onAllClickHandler}>All</button>\r\n//             <button onClick={onActiveClickHandler}>Active</button>\r\n//             <button onClick={onCompletedClickHandler}>Completed</button>\r\n//         </div>\r\n//         {children}\r\n//     </div>\r\n// }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}