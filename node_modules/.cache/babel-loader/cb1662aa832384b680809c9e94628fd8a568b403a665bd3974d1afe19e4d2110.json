{"ast":null,"code":"var _jsxFileName = \"/Users/viktoriakapinus/Documents/MyToDolist/todolist/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { Todolist } from './Todolist';\nimport { v1 } from 'uuid';\nimport { Input } from \"./Components/Input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  let todoListsID1 = v1();\n  let todoListsID2 = v1();\n  let [todoLists, SetTodoLists] = useState([{\n    id: todoListsID1,\n    title: \"Whats to learn\",\n    filter: \"all\"\n  }, {\n    id: todoListsID2,\n    title: \"Whats to buy\",\n    filter: \"all\"\n  }]);\n  let [tasks, setTasks] = useState({\n    [todoListsID1]: [{\n      id: v1(),\n      title: \"HTML&CSS\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"JS\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"ReactJS\",\n      isDone: false\n    }, {\n      id: v1(),\n      title: \"Rest API\",\n      isDone: false\n    }, {\n      id: v1(),\n      title: \"GraphQL\",\n      isDone: false\n    }],\n    [todoListsID2]: [{\n      id: v1(),\n      title: \"HTML&CSS\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"JS\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"ReactJS\",\n      isDone: false\n    }, {\n      id: v1(),\n      title: \"Rest API\",\n      isDone: false\n    }, {\n      id: v1(),\n      title: \"GraphQL\",\n      isDone: false\n    }]\n  });\n  const deleteTodolist = todoListsID => {\n    SetTodoLists(todoLists.filter(el => el.id !== todoListsID));\n  };\n  const removeTask = (todoListsID, taskId) => {\n    // setTasks(tasks.filter((el)=>el.id!==taskId))\n    setTasks({\n      ...tasks,\n      [todoListsID]: tasks[todoListsID].filter(el => el.id !== taskId)\n    });\n  };\n  const AddNameButton = (todoListsID, nameButton) => {\n    SetTodoLists(todoLists.map(el => el.id === todoListsID ? {\n      ...el,\n      filter: nameButton\n    } : el));\n  };\n  const AddMessage = (todoListsID, valueInput) => {\n    let newTask = {\n      id: v1(),\n      title: valueInput,\n      isDone: true\n    };\n    // setTasks([newTask,...tasks])\n    setTasks({\n      ...tasks,\n      [todoListsID]: [newTask, ...tasks[todoListsID]]\n    });\n  };\n  const ChangeStatus = (todoListsID, id, e) => {\n    // setTasks(tasks.map((el)=>el.id===id ?{...el,isDone:e} : el))\n    setTasks({\n      ...tasks,\n      [todoListsID]: tasks[todoListsID].map(el => el.id === id ? {\n        ...el,\n        isDone: e\n      } : el)\n    });\n  };\n  const AddTodolist = valueInput => {\n    const newId = v1();\n    let newTodo = {\n      id: newId,\n      title: valueInput,\n      filter: \"all\"\n    };\n    SetTodoLists({\n      ...todoLists,\n      [newId]: [newTodo]\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      AddMessage: AddTodolist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), todoLists.map(el => {\n      const Filtered = () => {\n        let newTask = tasks[el.id];\n        if (el.filter === 'active') {\n          newTask = tasks[el.id].filter(el => el.isDone === false);\n        }\n        if (el.filter === 'completed') {\n          newTask = tasks[el.id].filter(el => el.isDone === true);\n        }\n        return newTask;\n      };\n      return /*#__PURE__*/_jsxDEV(Todolist, {\n        todoListsID: el.id,\n        Filter: el.filter,\n        title: el.title,\n        tasks: Filtered(),\n        AddNameButton: AddNameButton,\n        removeTask: removeTask,\n        AddMessage: AddMessage,\n        ChangeStatus: ChangeStatus,\n        deleteTodolist: deleteTodolist\n      }, el.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"5jpW0gVQXdyXcWipTIx9Uuf1750=\");\n_c = App;\nexport default App;\n\n//-------------------------------------------------------------------------------------------------------\n//\n// export type FilterValuesType = \"all\" | \"active\" | \"completed\";\n//\n// function App() {\n//\n//     let [tasks, setTasks] = useState([\n//         {id: v1(), title: \"HTML&CSS\", isDone: true},\n//         {id: v1(), title: \"JS\", isDone: true},\n//         {id: v1(), title: \"ReactJS\", isDone: false},\n//         {id: v1(), title: \"Rest API\", isDone: false},\n//         {id: v1(), title: \"GraphQL\", isDone: false},\n//     ]);\n//\n//     function removeTask(id: string) {\n//         let filteredTasks = tasks.filter(t => t.id != id);\n//         setTasks(filteredTasks);\n//     }\n//\n//     function addTask(title: string) {\n//         let task = {id: v1(), title: title, isDone: false};\n//         let newTasks = [task, ...tasks];\n//         setTasks(newTasks);\n//     }\n//\n//     let [filter, setFilter] = useState<FilterValuesType>(\"all\");\n//\n//     let tasksForTodolist = tasks;\n//\n//     if (filter === \"active\") {\n//         tasksForTodolist = tasks.filter(t => t.isDone === false);\n//     }\n//     if (filter === \"completed\") {\n//         tasksForTodolist = tasks.filter(t => t.isDone === true);\n//     }\n//\n//     function changeFilter(value: FilterValuesType) {\n//         setFilter(value);\n//     }\n//\n//\n//     return (\n//         <div className=\"App\">\n//             <Todolist title=\"What to learn\"\n//                       tasks={tasksForTodolist}\n//                       removeTask={removeTask}\n//                       changeFilter={changeFilter}\n//                       addTask={addTask}>\n//                 <div>\n//                     <div>Many intresting information</div>\n//                     <div>Many intresting information</div>\n//                     <div>Many intresting information</div>\n//                     <div>Many intresting information</div>\n//                     <div>Many intresting information</div>\n//                 </div>\n//             </Todolist>\n//\n//             <Todolist title=\"What to learn\"\n//                       tasks={tasksForTodolist}\n//                       removeTask={removeTask}\n//                       changeFilter={changeFilter}\n//                       addTask={addTask}>\n//                 <div>\n//                     <div>A lot of boring information</div>\n//                     <div>A lot of boring information</div>\n//                     <div>A lot of boring information</div>\n//                     <input placeholder={'A lot of boring information'}/>\n//                     <div>\n//                         <button>Boring Button 1</button>\n//                         <button>Boring Button 2</button>\n//                         <button>Boring Button 3</button>\n//                     </div>\n//                 </div>\n//             </Todolist>\n//\n//             <Todolist title=\"What to learn\"\n//                       tasks={tasksForTodolist}\n//                       removeTask={removeTask}\n//                       changeFilter={changeFilter}\n//                       addTask={addTask}/>\n//         </div>\n//     );\n// }\n//\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Todolist","v1","Input","App","todoListsID1","todoListsID2","todoLists","SetTodoLists","id","title","filter","tasks","setTasks","isDone","deleteTodolist","todoListsID","el","removeTask","taskId","AddNameButton","nameButton","map","AddMessage","valueInput","newTask","ChangeStatus","e","AddTodolist","newId","newTodo","Filtered"],"sources":["/Users/viktoriakapinus/Documents/MyToDolist/todolist/src/App.tsx"],"sourcesContent":["import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport { v1 } from 'uuid';\r\nimport {Input} from \"./Components/Input\";\r\n\r\n\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\n\r\ntype TodoListsType = {\r\n    id: string,\r\n    title: string,\r\n    filter:FilterValuesType\r\n\r\n\r\n}\r\n\r\ntype taskStateType = {\r\n    [key:string]:TaskType[]\r\n}\r\n\r\nfunction App() {\r\n\r\n    let todoListsID1=v1()\r\n    let todoListsID2=v1()\r\n\r\n    let [todoLists, SetTodoLists] = useState<TodoListsType[]>([\r\n        {id: todoListsID1, title: \"Whats to learn\", filter: \"all\"},\r\n        {id: todoListsID2, title: \"Whats to buy\", filter: \"all\"},\r\n\r\n    ])\r\n\r\n\r\n    let [tasks, setTasks] = useState<taskStateType>({\r\n        [todoListsID1]:[\r\n        { id: v1(), title: \"HTML&CSS\", isDone: true },\r\n        { id: v1(), title: \"JS\", isDone: true },\r\n        { id: v1(), title: \"ReactJS\", isDone: false },\r\n        { id: v1(), title: \"Rest API\", isDone: false },\r\n        { id: v1(), title: \"GraphQL\", isDone: false },\r\n    ],\r\n        [todoListsID2]:[\r\n            { id: v1(), title: \"HTML&CSS\", isDone: true },\r\n            { id: v1(), title: \"JS\", isDone: true },\r\n            { id: v1(), title: \"ReactJS\", isDone: false },\r\n            { id: v1(), title: \"Rest API\", isDone: false },\r\n            { id: v1(), title: \"GraphQL\", isDone: false },\r\n        ]\r\n\r\n\r\n    });\r\n\r\n      const deleteTodolist=(todoListsID:string)=> {\r\n    SetTodoLists(todoLists.filter((el)=>el.id!==todoListsID))\r\n}\r\n\r\n    const removeTask = (todoListsID:string,taskId:string)=> {\r\n\r\n        // setTasks(tasks.filter((el)=>el.id!==taskId))\r\n        setTasks({...tasks,[todoListsID]:tasks[todoListsID].filter((el)=>el.id!==taskId)})\r\n    }\r\n\r\n\r\n       const AddNameButton = (todoListsID:string,nameButton:FilterValuesType)=> {\r\n     SetTodoLists(todoLists.map((el)=>el.id===todoListsID ?{...el,filter:nameButton} : el))\r\n       }\r\n\r\n\r\n\r\n       const AddMessage = (todoListsID:string,valueInput:string)=> {\r\n        let newTask={ id: v1(), title: valueInput, isDone: true }\r\n        // setTasks([newTask,...tasks])\r\n           setTasks({...tasks,[todoListsID]:[newTask,...tasks[todoListsID]]})\r\n       }\r\n\r\n       const ChangeStatus=(todoListsID:string,id:string,e:boolean)=> {\r\n          // setTasks(tasks.map((el)=>el.id===id ?{...el,isDone:e} : el))\r\n           setTasks({...tasks,[todoListsID]:tasks[todoListsID].map((el)=>el.id===id ?{...el,isDone:e} : el)})\r\n       }\r\n\r\n       const AddTodolist = (valueInput:string)=> {\r\n          const newId =v1()\r\n          let newTodo:TodoListsType={id:newId, title: valueInput, filter: \"all\" }\r\n\r\n\r\n          SetTodoLists({...todoLists,[newId]:[newTodo]})\r\n       }\r\n    return (\r\n        <div className=\"App\">\r\n            <Input AddMessage={AddTodolist}/>\r\n            {todoLists.map((el)=>{\r\n                const Filtered = ()=> {\r\n                    let newTask=tasks[el.id]\r\n                    if(el.filter==='active'){newTask=tasks[el.id].filter((el)=>el.isDone===false)}\r\n                    if(el.filter==='completed'){newTask=tasks[el.id].filter((el)=>el.isDone===true)}\r\n\r\n                    return newTask\r\n                }\r\n                return(\r\n                    <Todolist\r\n                        key={el.id}\r\n                        todoListsID={el.id}\r\n                        Filter={el.filter}\r\n                        title={el.title}\r\n                        tasks={Filtered()}\r\n                        AddNameButton={AddNameButton}\r\n                        removeTask={removeTask}\r\n                        AddMessage={AddMessage}\r\n                        ChangeStatus={ChangeStatus}\r\n                        deleteTodolist={deleteTodolist}\r\n                    />\r\n                )})\r\n\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//-------------------------------------------------------------------------------------------------------\r\n//\r\n// export type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n//\r\n// function App() {\r\n//\r\n//     let [tasks, setTasks] = useState([\r\n//         {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n//         {id: v1(), title: \"JS\", isDone: true},\r\n//         {id: v1(), title: \"ReactJS\", isDone: false},\r\n//         {id: v1(), title: \"Rest API\", isDone: false},\r\n//         {id: v1(), title: \"GraphQL\", isDone: false},\r\n//     ]);\r\n//\r\n//     function removeTask(id: string) {\r\n//         let filteredTasks = tasks.filter(t => t.id != id);\r\n//         setTasks(filteredTasks);\r\n//     }\r\n//\r\n//     function addTask(title: string) {\r\n//         let task = {id: v1(), title: title, isDone: false};\r\n//         let newTasks = [task, ...tasks];\r\n//         setTasks(newTasks);\r\n//     }\r\n//\r\n//     let [filter, setFilter] = useState<FilterValuesType>(\"all\");\r\n//\r\n//     let tasksForTodolist = tasks;\r\n//\r\n//     if (filter === \"active\") {\r\n//         tasksForTodolist = tasks.filter(t => t.isDone === false);\r\n//     }\r\n//     if (filter === \"completed\") {\r\n//         tasksForTodolist = tasks.filter(t => t.isDone === true);\r\n//     }\r\n//\r\n//     function changeFilter(value: FilterValuesType) {\r\n//         setFilter(value);\r\n//     }\r\n//\r\n//\r\n//     return (\r\n//         <div className=\"App\">\r\n//             <Todolist title=\"What to learn\"\r\n//                       tasks={tasksForTodolist}\r\n//                       removeTask={removeTask}\r\n//                       changeFilter={changeFilter}\r\n//                       addTask={addTask}>\r\n//                 <div>\r\n//                     <div>Many intresting information</div>\r\n//                     <div>Many intresting information</div>\r\n//                     <div>Many intresting information</div>\r\n//                     <div>Many intresting information</div>\r\n//                     <div>Many intresting information</div>\r\n//                 </div>\r\n//             </Todolist>\r\n//\r\n//             <Todolist title=\"What to learn\"\r\n//                       tasks={tasksForTodolist}\r\n//                       removeTask={removeTask}\r\n//                       changeFilter={changeFilter}\r\n//                       addTask={addTask}>\r\n//                 <div>\r\n//                     <div>A lot of boring information</div>\r\n//                     <div>A lot of boring information</div>\r\n//                     <div>A lot of boring information</div>\r\n//                     <input placeholder={'A lot of boring information'}/>\r\n//                     <div>\r\n//                         <button>Boring Button 1</button>\r\n//                         <button>Boring Button 2</button>\r\n//                         <button>Boring Button 3</button>\r\n//                     </div>\r\n//                 </div>\r\n//             </Todolist>\r\n//\r\n//             <Todolist title=\"What to learn\"\r\n//                       tasks={tasksForTodolist}\r\n//                       removeTask={removeTask}\r\n//                       changeFilter={changeFilter}\r\n//                       addTask={addTask}/>\r\n//         </div>\r\n//     );\r\n// }\r\n//\r\n// export default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}