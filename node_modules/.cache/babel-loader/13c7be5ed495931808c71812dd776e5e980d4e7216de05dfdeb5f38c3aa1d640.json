{"ast":null,"code":"var _jsxFileName = \"/Users/viktoriakapinus/Documents/MyToDolist/todolist/src/Todolist.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Todolist(props) {\n  const onClickHandler = nameButton => {\n    props.AddNameButton(nameButton);\n  };\n  const RemoveTask = taskId => {\n    props.removeTask(taskId);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: props.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: props.tasks.map(el => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [el.title, /*#__PURE__*/_jsxDEV(\"input\", {\n            type: 'checkbox',\n            checked: el.isDone\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 28\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => RemoveTask(el.id),\n            children: \"X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 28\n          }, this)]\n        }, el.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 24\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => onClickHandler('all'),\n      children: \"All\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => onClickHandler('active'),\n      children: \"Active\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => onClickHandler('completed'),\n      children: \"Completed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 12\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 8\n  }, this);\n}\n\n//----------------------------------------------------------------------------------\n// import React, {ChangeEvent, KeyboardEvent, useRef, useState} from 'react';\n// import {FilterValuesType} from './App';\n// import {useAutoAnimate} from \"@formkit/auto-animate/react\";\n//\n// type TaskType = {\n//     id: string\n//     title: string\n//     isDone: boolean\n// }\n//\n// type PropsType = {\n//     title: string\n//     tasks: Array<TaskType>\n//     removeTask: (taskId: string) => void\n//     changeFilter: (value: FilterValuesType) => void\n//     addTask: (title: string) => void\n//     children?:React.ReactNode\n// }\n//\n// export const Todolist:React.FC<PropsType>=({children, ...props}) =>{\n//     const [listRef] = useAutoAnimate<HTMLUListElement>()\n//     let onChangeRef = useRef<HTMLInputElement>(null)\n//     //let [title, setTitle] = useState(\"\")\n//\n//     const addTask = () => {\n//         // props.addTask(title);\n//         // setTitle(\"\");\n//         if (onChangeRef.current) {\n//             props.addTask(onChangeRef.current.value)\n//             onChangeRef.current.value = ''\n//         }\n//     }\n//\n//     // const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n//     //     setTitle(e.currentTarget.value)\n//     // }\n//\n//\n//     const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n//         if (e.key === 'Enter') {\n//             addTask();\n//         }\n//     }\n//\n//     const onAllClickHandler = () => props.changeFilter(\"all\");\n//     const onActiveClickHandler = () => props.changeFilter(\"active\");\n//     const onCompletedClickHandler = () => props.changeFilter(\"completed\");\n//\n//     return <div>\n//         <h3>{props.title}</h3>\n//         <div>\n//             <input\n//                 //value={title}\n//                 // onChange={ onChangeHandler }\n//                 ref={onChangeRef}\n//                 onKeyPress={onKeyPressHandler}\n//             />\n//             <button onClick={addTask}>+</button>\n//         </div>\n//         <ul ref={listRef}>\n//             {\n//                 props.tasks.map(t => {\n//\n//                     const onClickHandler = () => props.removeTask(t.id)\n//\n//                     return <li key={t.id} >\n//                         <input type=\"checkbox\" checked={t.isDone}/>\n//                         <span>{t.title}</span>\n//                         <button onClick={onClickHandler}>x</button>\n//                     </li>\n//                 })\n//             }\n//         </ul>\n//         <div>\n//             <button onClick={onAllClickHandler}>All</button>\n//             <button onClick={onActiveClickHandler}>Active</button>\n//             <button onClick={onCompletedClickHandler}>Completed</button>\n//         </div>\n//         {children}\n//     </div>\n// }\n_c = Todolist;\nvar _c;\n$RefreshReg$(_c, \"Todolist\");","map":{"version":3,"names":["React","Todolist","props","onClickHandler","nameButton","AddNameButton","RemoveTask","taskId","removeTask","title","tasks","map","el","isDone","id"],"sources":["/Users/viktoriakapinus/Documents/MyToDolist/todolist/src/Todolist.tsx"],"sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useRef, useState} from 'react';\r\nimport {FilterValuesType} from './App';\r\n\r\ntype TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    title:string\r\n    tasks: TaskType[]\r\n    AddNameButton:(nameButton:string)=>void\r\n    removeTask:(taskId:string)=>void\r\n\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n\r\n    const onClickHandler = (nameButton:string)=> {\r\n    props.AddNameButton(nameButton)\r\n    }\r\n\r\n    const RemoveTask = (taskId:string)=> {\r\n        props.removeTask(taskId)\r\n    }\r\n\r\n   return (\r\n       <div>\r\n           <h3>{props.title}</h3>\r\n           <input/>\r\n           <button>Delete</button>\r\n\r\n           <ul>\r\n               {props.tasks.map((el)=>{\r\n                   return(\r\n                       <li key={el.id}>\r\n                           {el.title}\r\n                           <input type={'checkbox'}    checked={el.isDone}/>\r\n                           <button onClick={()=>RemoveTask(el.id)}>X</button>\r\n                       </li>\r\n                   )\r\n               })}\r\n\r\n           </ul>\r\n           <button onClick={()=>onClickHandler('all')}>All</button>\r\n           <button onClick={()=>onClickHandler('active')}>Active</button>\r\n           <button onClick={()=>onClickHandler('completed')}>Completed</button>\r\n       </div>\r\n\r\n\r\n\r\n   )\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//----------------------------------------------------------------------------------\r\n// import React, {ChangeEvent, KeyboardEvent, useRef, useState} from 'react';\r\n// import {FilterValuesType} from './App';\r\n// import {useAutoAnimate} from \"@formkit/auto-animate/react\";\r\n//\r\n// type TaskType = {\r\n//     id: string\r\n//     title: string\r\n//     isDone: boolean\r\n// }\r\n//\r\n// type PropsType = {\r\n//     title: string\r\n//     tasks: Array<TaskType>\r\n//     removeTask: (taskId: string) => void\r\n//     changeFilter: (value: FilterValuesType) => void\r\n//     addTask: (title: string) => void\r\n//     children?:React.ReactNode\r\n// }\r\n//\r\n// export const Todolist:React.FC<PropsType>=({children, ...props}) =>{\r\n//     const [listRef] = useAutoAnimate<HTMLUListElement>()\r\n//     let onChangeRef = useRef<HTMLInputElement>(null)\r\n//     //let [title, setTitle] = useState(\"\")\r\n//\r\n//     const addTask = () => {\r\n//         // props.addTask(title);\r\n//         // setTitle(\"\");\r\n//         if (onChangeRef.current) {\r\n//             props.addTask(onChangeRef.current.value)\r\n//             onChangeRef.current.value = ''\r\n//         }\r\n//     }\r\n//\r\n//     // const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n//     //     setTitle(e.currentTarget.value)\r\n//     // }\r\n//\r\n//\r\n//     const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n//         if (e.key === 'Enter') {\r\n//             addTask();\r\n//         }\r\n//     }\r\n//\r\n//     const onAllClickHandler = () => props.changeFilter(\"all\");\r\n//     const onActiveClickHandler = () => props.changeFilter(\"active\");\r\n//     const onCompletedClickHandler = () => props.changeFilter(\"completed\");\r\n//\r\n//     return <div>\r\n//         <h3>{props.title}</h3>\r\n//         <div>\r\n//             <input\r\n//                 //value={title}\r\n//                 // onChange={ onChangeHandler }\r\n//                 ref={onChangeRef}\r\n//                 onKeyPress={onKeyPressHandler}\r\n//             />\r\n//             <button onClick={addTask}>+</button>\r\n//         </div>\r\n//         <ul ref={listRef}>\r\n//             {\r\n//                 props.tasks.map(t => {\r\n//\r\n//                     const onClickHandler = () => props.removeTask(t.id)\r\n//\r\n//                     return <li key={t.id} >\r\n//                         <input type=\"checkbox\" checked={t.isDone}/>\r\n//                         <span>{t.title}</span>\r\n//                         <button onClick={onClickHandler}>x</button>\r\n//                     </li>\r\n//                 })\r\n//             }\r\n//         </ul>\r\n//         <div>\r\n//             <button onClick={onAllClickHandler}>All</button>\r\n//             <button onClick={onActiveClickHandler}>Active</button>\r\n//             <button onClick={onCompletedClickHandler}>Completed</button>\r\n//         </div>\r\n//         {children}\r\n//     </div>\r\n// }\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAsD,OAAO;AAAC;AAiB1E,OAAO,SAASC,QAAQ,CAACC,KAAgB,EAAE;EAGvC,MAAMC,cAAc,GAAIC,UAAiB,IAAI;IAC7CF,KAAK,CAACG,aAAa,CAACD,UAAU,CAAC;EAC/B,CAAC;EAED,MAAME,UAAU,GAAIC,MAAa,IAAI;IACjCL,KAAK,CAACM,UAAU,CAACD,MAAM,CAAC;EAC5B,CAAC;EAEF,oBACI;IAAA,wBACI;MAAA,UAAKL,KAAK,CAACO;IAAK;MAAA;MAAA;MAAA;IAAA,QAAM,eACtB;MAAA;MAAA;MAAA;IAAA,QAAQ,eACR;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAuB,eAEvB;MAAA,UACKP,KAAK,CAACQ,KAAK,CAACC,GAAG,CAAEC,EAAE,IAAG;QACnB,oBACI;UAAA,WACKA,EAAE,CAACH,KAAK,eACT;YAAO,IAAI,EAAE,UAAW;YAAI,OAAO,EAAEG,EAAE,CAACC;UAAO;YAAA;YAAA;YAAA;UAAA,QAAE,eACjD;YAAQ,OAAO,EAAE,MAAIP,UAAU,CAACM,EAAE,CAACE,EAAE,CAAE;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAAW;QAAA,GAH7CF,EAAE,CAACE,EAAE;UAAA;UAAA;UAAA;QAAA,QAIT;MAEb,CAAC;IAAC;MAAA;MAAA;MAAA;IAAA,QAED,eACL;MAAQ,OAAO,EAAE,MAAIX,cAAc,CAAC,KAAK,CAAE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAa,eACxD;MAAQ,OAAO,EAAE,MAAIA,cAAc,CAAC,QAAQ,CAAE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAgB,eAC9D;MAAQ,OAAO,EAAE,MAAIA,cAAc,CAAC,WAAW,CAAE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAmB;EAAA;IAAA;IAAA;IAAA;EAAA,QAClE;AAOb;;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,KA1IgBF,QAAQ;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}